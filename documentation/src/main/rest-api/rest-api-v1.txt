RESTful Administration API
==========================
Unity Team <unity-idm-discuss@lists.sourceforge.net>
//Set to override automated version, which is the project version
//:revnumber: 9.9.9-FIXED
:numbered:
:toc: left
:linkcss:
:iconsdir: ./icons
:icons: font


The Unity REST API may be exposed (or disabled) as a regular Unity endpoint. See the 
<<manual.txt#endp-rest-admin,main Unity documentation>> for endpoints configuration details. 

All paths must be naturally prefixed with the server's base URL, endpoint deployment's path 
(as configured) and API version (currently there is only one). Example query path can be similar to:

   https://unity.example.com/rest-admin/v1/entity/1
   

NOTE: All operations which are operating on a single entity allow since version 1.9.4 to use
three different types of entity selectors. Entity can be specified as an integer number being the internal 
database identifier of entity in Unity --- this is the only option available in older versions. Alternatively
entity's persistentId can be used. Finally any other identity can be used to select identity, however then 
a query parameter +identityType+ must be used to provide the intended identity type.


== API reference


=== Resolve identity

+@Path("/resolve/{identityType}/{identityValue}")+ +
+@GET+ +

Resolves a provided identity of a given type. The returned information is the same as in case of the +/entity+ 
operation.

Example output: 
----
{
    "entityInformation": {
        "state": "valid",
        "entityId": 1
    },
    "identities": [
        {
            "value": "a",
            "confirmationInfo": {
                "confirmed": false,
                "confirmationDate": 0,
                "sentRequestAmount": 0
            },
            "comparableValue": "a",
            "creationTs": 1491257134658,
            "updateTs": 1491257134658,
            "typeId": "userName",
            "entityId": 1
        },
        {
            "value": "90bba4c5-adbe-4829-8215-e23960c52c33",
            "realm": "main",
            "confirmationInfo": {
                "confirmed": false,
                "confirmationDate": 0,
                "sentRequestAmount": 0
            },
            "comparableValue": "90bba4c5-adbe-4829-8215-e23960c52c33",
            "creationTs": 1491257533387,
            "updateTs": 1491257533387,
            "typeId": "persistent",
            "entityId": 1
        }
    ],
    "credentialInfo": {
        "credentialRequirementId": "Password requirement",
        "credentialsState": {
            "Password credential": {
                "state": "correct",
                "extraInformation": "{\"lastChange\":1491257134733}"
            }
        }
    }
}
----


=== Get entity information

+@Path("/entity/{entityId}")+ +
+@QueryParam("identityType")+ +
+@GET+ +

Returns information about a given entity, including its status and all identities.

Output is the same a in the +resolve+ identity case.

=== Get entity groups
	
+@Path("/entity/{entityId}/groups")+ +
+@QueryParam("identityType")+ +
+@GET+ +
 Returns all groups the entity is member of.

Example output: 
----
["/example/sub","/example","/"]
----


=== Get entity attributes 

+@Path("/entity/{entityId}/attributes")+ +
+@QueryParam("group")+ +
+@QueryParam("effective")+ +
+@QueryParam("identityType")+ +
+@QueryParam("includeSimpleValues")+ +
+@GET+ +

Returns attributes of a given entity in a selected group. Values are encoded in syntax type dependent way.
The optional effective query parameter (by default true) can be used to control whether only directly defined
or effective attributes are queried.

Example output: 
----
[
    {
        "values": [
            "2017-04-03T22:18:34"
        ],
        "creationTs": 1491257914036,
        "updateTs": 1491257914036,
        "direct": true,
        "name": "sys:LastAuthentication",
        "groupPath": "/",
        "valueSyntax": "string"
    },
    {
        "values": [
            "Regular User"
        ],
        "creationTs": 1491257136049,
        "updateTs": 1491257136049,
        "direct": true,
        "name": "sys:AuthorizationRole",
        "groupPath": "/",
        "valueSyntax": "enumeration"
    },
    {
        "values": [
            "{\"value\":\"some@email.com\",\"confirmationData\":{\"confirmed\":true,\"confirmationDate\":1491257136061,\"sentRequestAmount\":0},\"tags\":[]}"
        ],
        "creationTs": 1491257136075,
        "updateTs": 1491257136075,
        "direct": true,
        "name": "email",
        "groupPath": "/",
        "valueSyntax": "verifiableEmail"
    },
    {
        "values": [
            "Example organization",
            "org2",
            "org3"
        ],
        "creationTs": 1491257136052,
        "updateTs": 1491257136052,
        "direct": true,
        "name": "o",
        "groupPath": "/",
        "valueSyntax": "string"
    }
]
----

The optional includeSimpleValues query parameter (by default false) can be used to add to the output additional
property with a attributes' values parsed to simple output.

Example output: 
----
    {
        "values": [
            "{\"image\":\"{\\\"type\\\":\\\"PNG\\\",\\\"value\\\":\\\"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAIAAAAiOjnJAAAzEklEQVR42u1dB1gVxxa\\\"}\",\"externalId\":\"b4118506-3194-4f59-94a7-56c2d3babf00\"}"
        ],
        "creationTs": 1581616749295,
        "updateTs": 1581616749295,
        "direct": true,
        "name": "publicImage",
        "groupPath": "/",
        "valueSyntax": "publicLinkableImage",
        "simpleValues": [
            "https://localhost:2443/unitygw/content/b4118506-3194-4f59-94a7-56c2d3babf00"
        ]
    }
----


=== Get entity attributes in groups

+@Path(/entity/{entityId}/groups/attributes)+ +
+@QueryParam("groupsPatterns")+ +
+@QueryParam("effective")+ +
+@QueryParam("identityType")+ +
+@GET+ +

Returns grouped by group attributes of a given entity in a selected groups patterns.
Group pattern is an ant pattern, which has following rules:
(?) - matches one character within a path variable
(*) - matches any characters within a path variable
(**) - matches any characters across whole directory
Values are encoded in syntax type dependent way.
The optional effective query parameter (by default true) can be used to control whether only directly defined
or effective attributes are queried.

Example output:
----
[
    "/": [
        {
            "values": [
                "2017-04-03T22:18:34"
            ],
            "creationTs": 1491257914036,
            "updateTs": 1491257914036,
            "direct": true,
            "name": "sys:LastAuthentication",
            "groupPath": "/",
            "valueSyntax": "string"
        },
        {
            "values": [
                "Regular User"
            ],
            "creationTs": 1491257136049,
            "updateTs": 1491257136049,
            "direct": true,
            "name": "sys:AuthorizationRole",
            "groupPath": "/",
            "valueSyntax": "enumeration"
        }
    ],
    "/test": [
        {
            "values": [
                "{\"value\":\"some@email.com\",\"confirmationData\":{\"confirmed\":true,\"confirmationDate\":1491257136061,\"sentRequestAmount\":0},\"tags\":[]}"
            ],
            "creationTs": 1491257136075,
            "updateTs": 1491257136075,
            "direct": true,
            "name": "email",
            "groupPath": "/test",
            "valueSyntax": "verifiableEmail"
        },
        {
            "values": [
                "Example organization",
                "org2",
                "org3"
            ],
            "creationTs": 1491257136052,
            "updateTs": 1491257136052,
            "direct": true,
            "name": "o",
            "groupPath": "/test",
            "valueSyntax": "string"
        }
    ]
]
----

=== Get complete user record

+@Path("/entity/{entityId}/record")+ +
+@GET+ +

Returns a complete record with information about a given entity. Includes:

. entity state
. identities
. status of credentials
. membership in groups
. attributes in all groups

Example output:

----
{
  "entity": {
    "entityInformation": {
      "state": "valid",
      "entityId": 1
    },
    "identities": [
      {
        "value": "a",
        "confirmationInfo": {
          "confirmed": false,
          "confirmationDate": 0,
          "sentRequestAmount": 0
        },
        "comparableValue": "a",
        "creationTs": 1630876607610,
        "updateTs": 1630876607610,
        "typeId": "userName",
        "entityId": 1
      },
      {
        "value": "6cfb445e-ddb5-43d0-9141-63acf8b662e4",
        "confirmationInfo": {
          "confirmed": false,
          "confirmationDate": 0,
          "sentRequestAmount": 0
        },
        "comparableValue": "6cfb445e-ddb5-43d0-9141-63acf8b662e4",
        "creationTs": 1630876607643,
        "updateTs": 1630876607643,
        "typeId": "persistent",
        "entityId": 1
      }
    ],
    "credentialInfo": {
      "credentialRequirementId": "sys:all",
      "credentialsState": {
        "certificate credential": {
          "state": "correct",
          "stateDetail": null,
          "extraInformation": ""
        },
        "fido": {
          "state": "notSet",
          "stateDetail": null,
          "extraInformation": ""
        },
        "sys:password": {
          "state": "correct",
          "stateDetail": null,
          "extraInformation": "{\"lastChange\":1630876608112}"
        },
        "customPassword": {
          "state": "notSet",
          "stateDetail": null,
          "extraInformation": ""
        },
        "sys:sms": {
          "state": "notSet",
          "stateDetail": null,
          "extraInformation": ""
        }
      }
    }
  },
  "groups": {
    "/projects": {
      "creationTs": 1630876712555,
      "group": "/projects",
      "entityId": 1
    },
    "/": {
      "creationTs": 1630876607615,
      "group": "/",
      "entityId": 1
    }
  },
  "attributesInGroups": {
    "/projects": [
      {
        "values": [
          "1234"
        ],
        "creationTs": 1630876729838,
        "updateTs": 1630876729838,
        "direct": true,
        "name": "code",
        "groupPath": "/projects",
        "valueSyntax": "string"
      }
    ],
    "/": [
      {
        "values": [
          "Default Administrator"
        ],
        "creationTs": 1630876609099,
        "updateTs": 1630876609099,
        "direct": false,
        "name": "name",
        "groupPath": "/",
        "valueSyntax": "string"
      },
      {
        "values": [
          "2021-09-05T23:18:24"
        ],
        "creationTs": 1630876633643,
        "updateTs": 1630876704874,
        "direct": true,
        "name": "sys:LastAuthentication",
        "groupPath": "/",
        "valueSyntax": "string"
      },
      {
        "values": [
          "sys:all"
        ],
        "creationTs": 1630876607623,
        "updateTs": 1630876607623,
        "direct": true,
        "name": "sys:CredentialRequirements",
        "groupPath": "/",
        "valueSyntax": "string"
      }
    ]
  }
}

----


=== Get direct attributes of an entity 

+@Path("/entity/{entityId}/groups/direct/attributes")+ +
+@GET+ +

Returns all direct attributes of a given entity. Results are grouped by group path in which attributes are defined.
Note that while this method is not applicable in all cases (as the dynamic attributes from attribute statements are not
returned), it is much faster than the regular retrieval of all attributes.

Example output:

----
{
  "/": [
     {
      "values": [
        "2022-04-14T16:23:01"
      ],
      "creationTs": 1649946007973,
      "updateTs": 1649946181417,
      "direct": true,
      "name": "sys:LastAuthentication",
      "groupPath": "/",
      "valueSyntax": "string"
    },
    {
      "values": [
        "Default Administrator"
      ],
      "creationTs": 1649945937183,
      "updateTs": 1649945937183,
      "direct": true,
      "name": "name",
      "groupPath": "/",
      "valueSyntax": "string"
    }
  ],
  "/projects/FBI": [
    {
      "values": [
        "Long street 13"
      ],
      "creationTs": 1649946239973,
      "updateTs": 1649946239973,
      "direct": true,
      "name": "address",
      "groupPath": "/projects/FBI",
      "valueSyntax": "string"
    }
  ]
}
----

=== Get groups members with selected attributes

+@Path("/group-members-attributes/{groupPath}")+ +
+@QueryParam("attributes")+ +
+@GET+ +

This API endpoint allows for retrieving given group members but also limiting output to a subset of attributes 
which are interesting to the caller. This endpoint is useful in case when number of attributes is large in a large group,
to minimize transfered data size. Additionally, if all requested attributes are direct or global attributes,
this endpoint is significantly faster then the generic one returning all attributes.

The +attributes+ parameter accepts a list of strings.

Example output:

----
[
  {
    "entityInformation": {
      "id": 2,
      "entityState": "valid",
      "scheduledOperationTime": null,
      "scheduledOperation": null,
      "removalByUserTime": null
    },
    "identities": [
      {
        "entityId": 2,
        "creationTs": 1649945937691,
        "updateTs": 1649945937691,
        "comparableValue": "b11008fe-fa76-45fe-b20a-2825be972fbd",
        "typeId": "persistent",
        "value": "b11008fe-fa76-45fe-b20a-2825be972fbd",
        "target": null,
        "realm": null
      }
    ],
    "attributes": [
      {
        "direct": true,
        "creationTs": 1649948449977,
        "updateTs": 1649948449977,
        "name": "address",
        "valueSyntax": "string",
        "groupPath": "/A",
        "values": [
          "Long street"
        ],
        "translationProfile": null,
        "remoteIdp": null
      },
      {
        "direct": true,
        "creationTs": 1649945937765,
        "updateTs": 1649945937765,
        "name": "name",
        "valueSyntax": "string",
        "groupPath": "/",
        "values": [
          "Demo user"
        ],
        "translationProfile": null,
        "remoteIdp": null
      }
    ]
  }
]
---- 


=== Get multiple groups members with selected attributes

+@Path("/multi-group-members-attributes")+ +
+@QueryParam("attributes")+ +
+@QueryParam("groups")+ +
+@GET+ +

The same functionality as offered by the +/group-members-attributes+ endpoint, but allows for retrieving data from 
multiple groups with a single call. Result is additionally grouped by group paths.


=== Get group metadata

+@Path("/group/{groupPath}/meta")+ +
+@GET+ +

Returns settings of a group.

Example output: 
----
{
    "i18nDescription": {
        "DefaultValue": null,
        "Map": {}
    },
    "displayedName": {
        "DefaultValue": "/",
        "Map": {"en" : "Root group"}
    },
    "attributeStatements": [
        {
            "resolution": "skip",
            "condition": "true",
            "fixedAttribute": {
                "values": [
                    "Regular User"
                ],
                "name": "sys:AuthorizationRole",
                "groupPath": "/",
                "valueSyntax": "enumeration"
            }
        }
    ],
    "attributesClasses": [],
    "delegationConfiguration": {
        "enabled": false
    },
    "publicGroup": false,
    "path": "/"
}
----


=== Get group contents

+@Path("/group/{groupPath}")+ +
+@GET+ +

Returns all members and subgroups of a given group.

Example output: 
----
{
    "subGroups": [
        "/A/B"
    ],
    "members": [
        {
            "creationTs": 1491257136044,
            "group": "/A",
            "entityId": 2
        },
        {
            "creationTs": 1491257136613,
            "group": "/A",
            "entityId": 4
        }
    ]
}
----


=== Get group members with attributes

+@Path("/group-members/{groupPath}")+ +
+@GET+ +

Returns all resolved members of a given group: for each member a complete identity information and attributes in the
group are returned.

Example output: 
----
[
    {
        "group": "/",
        "entity": {
            // the same as result to resolve identity operation
        },
        "attributes": [
			// the same syntax as in get entity attributes case
        ]
    },
    // ... subsequent group members 
]
----


=== Get multiple groups members with attributes

+@Path("/group-members-multi/{rootGroupPath}")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Returns all resolved members in all groups under a given path, also including grand children. 

The body of the request must be JSON array with strings. If the array is empty then data for all groups is returned.
Otherwise the array may contain a set of group names, all of which must be children of rootGroupPath. 
Only the data for those groups will be returned.

Output structure: 
----
{
    "entities": [
        {
            // the same as result to resolve identity operation
        },
        ...
    ],
    "members": {
        "/root/grp3": [
            {
                "attributes": [
                    {
						// the same syntax as in get entity attributes case
					},
					...
			    ],
                "entityId": 10	//one of group members, of which attributes are provided in this element
            },
            ...
        ],
        ...
    }
}
----

=== Create group (simple)

+@Path("/group/{groupPath}")+ +
+@QueryParam("withParents")+ +
+@POST+ +

Creates a new group. The created group will be empty and will contain only the default settings 
(e.g. no attribute statements, no description, displayed name set to group path name).
The optional +(false,withParents)+ query parameter (by default false) can be used to add groups in recursive way.
(For example three groups can be add by one request in following hierarchy "newGroup1/newGroup2/newGroup3")


=== Create group (advanced)

+@Path("/group")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Creates a new group with complete configuration provided in JSON body. Example (rather minimal) request:

----
{
    "displayedName": {
        "Map": {"en":"Fancy name"}
    },
    "i18nDescription": {
        "Map": {"en":"Fancy description"}
    },
    "attributeStatements": [],
    "attributesClasses": [],
    "delegationConfiguration": {
        "enabled": false
    },
    "publicGroup": false,
    "path": "/added-group"
}
----

=== Create groups 

+@Path("/groups")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Creates new groups with complete configuration provided in JSON body. Example (rather minimal) request:

----
[
	{
	    "displayedName": {
	        "Map": {"en":"Fancy name"}
	    },
	    "i18nDescription": {
	        "Map": {"en":"Fancy description"}
	    },
	    "attributeStatements": [],
	    "attributesClasses": [],
	    "delegationConfiguration": {
	        "enabled": false
	    },
	    "publicGroup": false,
	    "path": "/added-group"
	},
	// ... next group definition 
]
----

The format of the body is the same as returned by the group metadata endpoint.

=== Update group settings

+@Path("/group")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Uses the same body syntax as create group (the POST) endpoint. Allows for changing displayed name, 
attribute statements, classes etc.


=== Delete groups

+@Path("/group/{groupPath}")+ +
+@QueryParam("recursive")+ +
+@DELETE+ +

Removes a given group. The optional +recursive+ query parameter can be used to 
enforce recursive removal (off by default).

=== Get group attribute statements

+@Path("/group/{groupPath}/statements")+ +
+@GET+ +

Returns a JSON array with all attribute statements of a group. 
Example output:
----
[ 
  {
    "resolution":"skip",
    "condition":"true",
    "extraGroupName":"/",
    "dynamicAttributeExpression":"eattr['name']",
    "dynamicAttributeName":"name"
  }
]
----

=== Update group attribute statements

+@Path("/group/{groupPath}/statements")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Updates given group's attribute statements. The body should contain statements list, same format as 
returned by the corresponding GET.

=== Create entity

+@Path("/entity/identity/{type}/{value}")+ +
+@QueryParam("credentialRequirement")+ +
+@POST+ +	

Creates a new entity, with the given initial identity and credential requirement. The new entity is 
in valid state. New entity id is returned.

Example output: 
----
{"entityId":3}
----


=== Create identity

+@Path("/entity/{entityId}/identity/{type}/{value}")+ +
+@QueryParam("identityType")+ +
+@POST+ +

Creates a new identity for the given entity. No content is returned. Note that for e-mail identities the regular Unity
conventions can be used to control confirmation state and tags - see <<email-encoding>>.


=== Remove entity

+@Path("/entity/{entityId}")+ +
+@QueryParam("identityType")+ +
+@DELETE+ +

Removes the given entity. No content is returned.

=== Schedule user removal

+@Path("/entity/{entityId}/removal-schedule")+ +
+@QueryParam("when")+
+@QueryParam("identityType")+ +
+@PUT+ +

Sets the entity in the state where it can only login and schedules its removal at given 
time unless the user logs in before this time. No content is returned. This operation is 
allowed to be called on self .


=== Schedule entity operations

+@Path("/entity/{entityId}/admin-schedule")+ +
+@QueryParam("when")+
+@QueryParam("operation")+
+@QueryParam("identityType")+ +
+@PUT+ +

Schedules an operation to be invoked at a given time on an entity. Must be called by privileged user. Allowed
operations are: +REMOVE+ and +DISABLE+.

=== Remove identity

+@Path("/entity/identity/{type}/{value}")+ +
+@DELETE+ +

Removes the given identity. No content is returned.

=== Add to group

+@Path("/group/{groupPath}/entity/{entityId}")+ +
+@QueryParam("identityType")+ +
+@POST+ +

Adds the given entity as a member to a group. Note that group must be URL encoded, the +/+ character should be 
given as +%2F+. No content is returned. 

=== Remove from group

+@Path("/group/{groupPath}/entity/{entityId}")+ +
+@QueryParam("identityType")+ +
+@DELETE+ +

Removes a given entity from a group. Note that group must be URL encoded, the +/+ character should be 
given as +%2F+. No content is returned.

=== Set attribute

+@Path("/entity/{entityId}/attribute")+ +
+@QueryParam("identityType")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Sets (creates or updates) an attribute for the given entity. The body of the PUT request describes the attribute:
its name, values and group. Its syntax is the same as returned by the GET attributes operation, however the +syntax+ 
and +direct+ shall not be used. No content is returned. Example attribute encoded (email with two values):

----
{
  "values": [
    "{\"value\":\"some@email.com\",\"confirmationData\":{\"confirmed\":true,\"confirmationDate\":1491257136061,\"sentRequestAmount\":0},\"tags\":[]}"
  ],
  "name": "email",
  "groupPath": "/A"
}
----

=== Bulk set attributes

+@Path("/entity/{entityId}/attributes")+ +
+@QueryParam("identityType")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Bulk attributes creation or update for a given entity. The body of the PUT request describes the attributes. Its root
level element must be JSON array. Elements of the array are attributes expressed in the same way as in the singular
set attribute operation.

=== Remove attribute

+@Path("/entity/{entityId}/attribute/{attributeName}")+ +
+@QueryParam("identityType")+ +
+@QueryParam("group")+ +
+@DELETE+ +

Removes the given attribute of an entity. No content is returned. 

=== Set credential (admin)

+@Path("/entity/{entityId}/credential-adm/{credential}")+ +
+@QueryParam("identityType")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Sets a new credential secret for the given entity. The caller must have administrative privileges. 
Credential name is given as the path parameter, while the secret 
is carried in the JSON body. No content is returned. For the password credential the complete value could be
(with a selected security question and its answer):  

----
{"password":"newpass","answer":"Some answer","question":1}
----

=== Set credential (user)

+@Path("/entity/{entityId}/credential/{credential}")+ +
+@QueryParam("identityType")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Sets a new credential secret for the given entity. The caller is assumed to change his/her own credential.  
Credential name is given as the path parameter, while the new secret is carried in the JSON body. 
No content is returned. The body must be a JSON array with one element. 

IMPORTANT: the value of the array must be JSON string, not JSON object.

IMPORTANT: the additional authentication policy of the site must evaluate to the changed credential (typically 
with the +CURRENT+ entry). Currently it is possible to change only the credential used for authenticating the client.   

For the password credential the complete value could be (with a selected security question and its answer):  

----
[ 
  "{\"password\":\"newpass\",\"answer\":\"Some answer2\",\"question\":0}" 
]
----

=== Set credential status

+@Path("/entity/{entityId}/credential/{credential}/status/{status}")+ +
+@QueryParam("identityType")+ +
+@PUT+ +

Sets a given credential status for the user. Allowed status is either +notSet+ (clears the credential) or +outdated+ 
(invalidated existing credential, user will need to change it after the next interactive login).  


=== Set 2nd factor (2FA) opt-in for entity

+@Path("/entity/{entityId}/2f-optin/{status}")+ +
+@QueryParam("identityType")+ +
+@PUT+ +

Sets the status of 2nd factor use opt in for an entity. Status can be +true+ or +false+.

=== Get 2nd factor (2FA) opt-in of entity

+@Path("/entity/{entityId}/2f-optin")+ +
+@QueryParam("identityType")+ +
+@GET+ +

Returns string with the status of 2nd factor use opt-in of a given entity.


=== Get attribute types

+@Path("/attributeTypes")+ +
+@GET+ +

Returns an array with all attribute types. Example:

----
[
    {
        "flags": 1,
        "maxElements": 5,
        "minElements": 1,
        "selfModificable": false,
        "uniqueValues": true,
        "syntaxState": {
            "allowed": [
                "implicit",
                "client",
                "openidHybrid",
                "authorizationCode"
            ]
        },
        "displayedName": {
            "DefaultValue": "sys:oauth:allowedGrantFlows",
            "Map": {
                "pl": "Dozwolone granty OAuth",
                "en": "OAuth client allowed grants"
            }
        },
        "i18nDescription": {
            "DefaultValue": null,
            "Map": {
                "pl": "Atrybut klienta OAauth...",
                "en": "OAuth Client specific attribute..."
            }
        },
        "metadata": {},
        "name": "sys:oauth:allowedGrantFlows",
        "syntaxId": "enumeration"
    },
...
]
----

=== Create attribute type

+@Path("/attributeType")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Creates a new attribute type. The POSTed request body must contain a JSON description of the attribute type, 
with the same syntax as returned by the GET query on attributeTypes. Only a single element is permitted, i.e. do
not pass an JSON array. The +flags+ field should be always set to 0.


=== Update attribute type

+@Path("/attributeType")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Updates an existing attribute type. The syntax rules are as for POST, however the name of the updated attribute
type must resolve to an existing attribute type.


=== Remove attribute type

+@Path("/attributeType/{toRemove}")+ +
+@QueryParam("withInstances")+ +
+@DELETE+ +

Removes a given attribute type. Query parameter +withInstances+ is used to control whether all attributes of the
removed type should be removed too (value +true+) or whether the operation should fail if there are any attributes
(value +false+).


=== Trigger identity confirmation message

+@Path("/confirmation-trigger/identity/{type}/{value}")+ +
+@POST+ +

Triggers sending of confirmation message of identity. Nearly always it is a re-send.


=== Trigger attribute confirmation message

+@Path("/confirmation-trigger/entity/{entityId}/attribute/{attributeName}")+ +
+@QueryParam("group")+ +
+@QueryParam("identityType")+ +
+@POST+ +

Triggers sending of confirmation message for an attribute. Nearly always it is a re-send.


=== Get endpoints

+@Path("/endpoints")+ +
+@GET+ +

Returns all deployed endpoints. Example response with a single endpoint:

----
[{
        "endpoint": {
            "name": "/console",
            "typeId": "WebConsoleUI",
            "contextAddress": "/console",
            "configuration": {
                "displayedName": {
                    "DefaultValue": "UNITY administration interface",
                    "Map": {
                        "pl": "Interfejs administracyjny Unity"
                    }
                },
                "description": "",
                "configuration": "unity.endpoint.web.enableRegistration=true\n...",
                "realm": "admin",
                "authenticationOptions": [
                    {
                        "primaryAuthenticator": "pwdWeb1"
                    },
                    {
                        "primaryAuthenticator": "pwdWeb2",
                        "mandatory2ndAuthenticator": "certWeb"
                    },
                    {
                        "primaryAuthenticator": "certWeb",
                        "mandatory2ndAuthenticator": "pwdWeb2"
                    },
                    {
                        "primaryAuthenticator": "certWeb"
                    },
                    {
                        "primaryAuthenticator": "ldapWeb"
                    },
                    {
                        "primaryAuthenticator": "ldapDNWeb"
                    },
                    {
                        "primaryAuthenticator": "samlWeb"
                    },
                    {
                        "primaryAuthenticator": "oauthWeb"
                    }
                ]
            }
        },
        "realm": {
            "description": null,
            "name": "admin",
            "allowForRememberMeDays": 0,
            "blockAfterUnsuccessfulLogins": 5,
            "blockFor": 8,
            "maxInactivity": 600
        },
        "type": {
            "name": "WebConsoleUI",
            "description": "Web administrative user interface",
            "supportedBindings": [
                "web-vaadin7"
            ],
            "paths": {
                "/console": "Web admin endpoint"
            }
        }
    }]
}]
----
	

=== Undeploy endpoint

+@Path("/endpoint/{id}")+ +
+@DELETE+ +

Undeploys a deployed endpoint. 


=== Deploy endpoint

+@Path("/endpoint/{id}")+ +
+@QueryParam("typeId")+ + 
+@QueryParam("address")+ + 
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Instantiates a new endpoint with a given configuration. Type and context path are specified as query parameters. The 
overall configuration is given in JSON document sent in the request body. Example:

----
{
  "displayedName" : {
    "DefaultValue" : "endpointName",
    "Map" : { }
  },
  "description" : "endpoint description",
  "authenticationOptions" : [ {
    "primaryAuthenticator" : "ApassREST"
  } ],
  "configuration" : "here comes endpoint configuration, typically in Java properties format",
  "realm" : "authnRealm"
}
----  


=== Update endpoint

+@Path("/endpoint/{id}")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Updates the given endpoint's configuration. The configuration is provided in request body (see POST method for example).
If some of the elements are missing, then existing values remain unchanged.


=== Get registration forms

+@Path("/registrationForms")+ +
+@GET+ +

Returns a JSON array with registration forms defined in the system. The syntax is complex
and is not provided here.


=== Remove registration form

+@Path("/registrationForm/{formId}")+ +
+@QueryParam("dropRequests")+ +
+@DELETE+ +

Removes registration form with the given id. An optional query parameter +dropRequests+ can be 
provided with a boolean value, to control whether the form should be removed also if it
has pending requests (the requests will be removed with the form).  


=== Create registration form
	
+@Path("/registrationForm")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Creates a new registration form specified by the JSON object passed as request body.
The form description is quite complex. The easiest way is to create a registration form using the AdminUI
and then check the resulting JSON (GET on +/registrationForms+).


=== Update registration form

+@Path("/registrationForm")+ +
+@QueryParam("ignoreRequests")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Updates an existing registration form. The body of the request should include 
a JSON description of a form, as during form creation. The only difference is
that this method expects existing form id. 
The optional boolean +ignoreRequests+ query parameter can be used to force form
update even if it has attached pending requests. Beware, however, that those
requests can easily become invalid.


=== Get registration requests

+@Path("/registrationRequests")+ +
+@GET+ +

Returns an array with all registration requests which are stored in the system.


=== Get registration request

+@Path("/registrationRequest/{requestId}")+ +
+@GET+ +

Returns a registration request by its id.



=== Get registration invitations

+@Path("/invitations")+ +
+@GET+ +

Returns a JSON array with all existing invitations.


=== Get invitation


+@Path("/invitation/{code}")+ +
+@GET+ +

Returns a JSON encoded invitation with the specified code.


=== Remove invitation

+@Path("invitation/{code}")+ +
+@DELETE+ +

Removes an invitation with a specified code.


=== Send invitation

+@Path("invitation/{code}/send")+ +
+@POST+ +

Triggers sending a message with an invitation. The registration form of the invitation
must have an invitation template defined, and the invitation must have contact address and channel
set.


=== Create invitation

+@Path("invitation")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +
+@Produces(MediaType.TEXT_PLAIN)+ +

Creates a new invitation. Returned string is the unique code of the newly created invitation.
Example invitation definition:

----
{
  "formId" : "exForm",
  "expiration" : 1454703788,
  "contactAddress" : "someAddr@example.com",
  "channelId" : "channelId",
  "identities" : {},
  "groupSelections" : {},
  "attributes" : {}
}
---- 

Syntax of prefilled parameters, can be seen in the result of retrieving an AdminUI defined invitation
via the REST GET methods.


=== Update invitation

+@Path("invitation/{code}")+ +
+@PUT+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Updates an existing invitation - preserving its code, but changing metadata and prefilled information. 
The registration form to which invitation was originally issued can not be modified as 
well as the original contact address. 

Body conforms to the same syntax as when creating a new invitation.

=== Identity bulk processing

+@Path("bulkProcessing/instant")+ +
+@QueryParam("timeout")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +
+@Produces(MediaType.TEXT_PLAIN)+ +

Schedules a rule for immediate processing. The optional query param +timeout+ controls whether the method should return
immediately after scheduling (no parameter) or after completing (parameter set). In the latter case parameter 
must specify the maximum wait time in seconds. Returned string is the status of scheduling (not the result of the action).
Possible statuses are: +sync+ (rule execution was completed in synchronous mode), +async+ (rule was submitted) 
or +timeout+ (rule was submitted in the synchronous mode but completion await time has passed).

Example rule definition:

----
{
  "condition" : "(idsByType contains 'userName') && (idsByType['userName'] contains 'user-to-remove')",
  "actionName" : "removeEntity",
  "params" : [ ]
}
---- 


=== Trigger identity import

+@Path("/import/user/{identity}")+ +
+@QueryParam("type")+ +
+@POST+ +
+@Produces(MediaType.APPLICATION_JSON)+ +

Triggers import of the given identity, optionally providing also intended type, though the type is usually not needed.
Unity will trigger configured importers in order, stopping at the first which successfully imports the given user.
The result is a very detailed dump of import information, starting from status, with unprocessed imported data
and processed data after applying the translation profile.


=== Trigger system event

+@Path("/triggerEvent/{eventName}")+ +
+@POST+ +
+@Consumes(MediaType.APPLICATION_JSON)+ +

Triggers event with a given name. Body of the request is passed as argument (context) of the event. 
This feature is typically used to trigger extension script invocation by Unity server: if a script is 
configured as a handler for the used event it will be launched. That way server REST API functionality can be 
manually enhanced.

=== Get tokens

+@Path("/tokens")+ +
+@GET+ +
+@QueryParam("type")+ +
+@QueryParam("owner")+ +
+@QueryParam("ownerType")+ +


Returns an array with JSON encoded tokens. If a caller has administrative privileges then returns all tokens.
Otherwise returns tokens only which are owned by the caller. 
The optional +owner+, +ownerType+ and +type+ query parameters can be used to filter returned tokens. 

=== Remove token

+@Path("/token/{type}/{value}")+ +
+@DELETE+ +

Removes a requested token. No content is returned. If a caller has administrative privileges 
then any token can be removed, otherwise it is allowed for removing owned tokens only.


=== Send user notification

+@Path("/userNotification-trigger/entity/{identityValue}/template/{templateId}")+ +
+@POST+ +
+@QueryParam("identityType")+ +

Triggers sending user notification of the given message template. Request may use additional, variable, query parameters
which are used as template parameters. All such parameters should have the +custom.+ prefix (which is mandatory
in message template for custom properties).

=== Get idp usage statistics

+@Path("/idp-stats")+ +
+@GET+ +
+@QueryParam("since")+ +
+@QueryParam("groupBy")+ +
+@QueryParam("skipZeroRecords")+ +

Returns idp usage statistics since a given date. Idp statistics can be grouped, allowed options are: none, day, month, total. 
It is also possible to control whether all-zero records in the requested time range should be included or not with the 
+skipZeroRecords+ option, accepting +true+ (the default) and +false+ values.

Example output without any grouping applied:

----
[
   {
      "idpId":"endpoint-id",
      "idpName":"Endpoint name",
      "clientId":"clientId1",
      "clientName":"Client Name",
      "sigInStats":[
         {
            "periodStart":"2021-10-21T15:14:09Z",
            "periodEnd":"2021-10-21T15:15:09Z",
            "totatCount":1,
            "successfullCount":1,
            "failedCount":0
         }
      ]
   }
]
----


=== Get all policy documents

+@Path("/policy-documents")+ +
+@GET+ +

Returns all policy documents.
ContentType can be one of "LINK" or "EMBEDDED"

Example output:

----
[
	{
	      "id": 1,
	      "name": "string",
	      "displayedName": [
	            "en": "displayedName",
	            "fr": "nomAffiche"
	      ],
	      "mandatory": true,
	      "contentType": "LINK"
	      "revision": "1"
	}
]
----


=== Get policy document

+@Path("/policy-documents/{document-id}")+ +
+@GET+ +

Returns the given policy document.
ContentType can be one of "LINK" or "EMBEDDED"

Example output:

----
{
      "id": 1,
      "name": "string",
      "displayedName": {
            "en": "displayedName",
            "fr": "nomAffiche"
      },
      "mandatory": true,
      "contentType": "EMBEDDED",
      "revision": "1"
}
----

=== Add policy document

+@Path("/policy-documents")+ +
+@POST+ +

Adds a new policy document.
ContentType can be one of "LINK" or "EMBEDDED"

Example input:

----
{
      "name": "string",
      "displayedName": {
            "en": "displayedName",
            "fr": "nomAffiche"
      },
      "mandatory": true,
      "contentType": "LINK",
      "content": {
            "en": "https://example.com/some/url/en",
            "fr": "https://example.com/some/url/fr"
      }
}
----


Example output:

----
{
      "id": 1
}
----

=== Remove policy document

+@Path("/policy-documents/{document-id}")+ +
+@DELETE+ +

Removes the given policy document.


=== Update policy document

+@Path("/policy-documents/{document-id}")+ +
+@QueryParam("revision")+ +
+@PUT+ +

Updates the given policy document. If query parameter "revision" is set to true, update increment revision, and re-acceptance will be needed.
ContentType can be one of "LINK" or "EMBEDDED"

Example input:

----
{
      "name": "string",
      "displayedName": {
            "en": "displayedName",
            "fr": "nomAffiche"
      },
      "mandatory": true,
      "contentType": "EMBEDDED",
      "content": {
            "en": "content",
            "fr": "contenu"
      }
}
----


=== Get policy document's content

+@Path("/policy-documents/{document-id}/content")+ +
+@GET+ +

Returns the given policy document's content.
If document content type is "EMBEDDED", http Content-Type will be text/html.
If document content type is "LINK", http Content-Type will be text/plain.
