[[quick_start]]
== Quick start

This section is fairly standalone and serves as a first-read, hands-on introduction to Unity.
It is advised to read the <<introduction>> section first. Also installation of Unity is not
covered here. While it is simple (download & unpack) you can read the details in <<installation>>.

=== What is provided in the package?

Unity server can be started right after installation. By default the server is configured to listen on the localhost 
(loopback) network interface and uses _absolutely insecure credentials_ for the TLS protocol. Therefore you can 
play around but before going into any real usage some reconfiguration is mandatory.

Let's start from crucial facts about Unity in general:

- Unity by default uses a single HTTPS port. It must be opened on firewall. The port is configurable. 
- Plain HTTP port may be used instead if you plan to hide Unity behind a HTTPS proxy.
- Unity uses a configurable persistence mechanism to store its state. Not
only the users and attributes are stored in database: also a nearly complete configuration of the system.
- The most of the Unity configuration which is provided in config files is only loaded on first startup and
persisted. Those settings can be edited at runtime in the web Admin Console interface.

Here we list the most important facts about the default configuration:

- The server is configured to run on +localhost+ address on the port +2443+. Also the advertised address 
(i.e. the address which Unity presents as its address to external clients) is localhost. 
All of those parameters need an update before going into production.
- The server uses an insecure credential (its private key is well known) issued by an insecure CA, which is the only
one trusted CA. A real credential and truststore should be used for production.
- When a proper certificate is installed it is strongly advised to consider turning on the HSTS mechanism to improve
server's security (with +unityServer.core.httpServer.enableHsts=true+ ).
- The server uses an embedded H2 database. Its performance is fine, however it is not recommended in production 
deployments where DB backups and high availability may easily become a requirement.
- The server should be started by an unprivileged user.
- If one wants to use a low port (e.g. 443) for Unity, then authbind is the suggested solution. It can be easily 
enabled in +startup.properties+
- The distribution can load some demo contents. If you need it enable the configuration module +demoContents.module+ 
towards the end of the +unityServer.conf+ file.


==== The first and subsequent startups

During the startup the server checks if it needs to initialize the various subsystems. This initialization takes place
during the first start after installation and also after the Unity database is deleted.

. If the database is empty the tables are automatically created. There is no need to invoke any database initialization 
scripts. The database is populated with the mandatory system contents.
. If there is no configured admin user in the database, this user is created, using the configured credentials.
The default admin user credential is automatically set to the _outdated_ state, what causes a necessity to change it 
immediately after the first login. 
. Subsequently the data structures defined in configuration files are loaded to the database on the very first 
(cold) start only. This is default behavior from version 3 onwards (and can be changed as noted in the installation section). 

=== What should be reconfigured always before going into production?

Once again, to have a short list:

- Remove the demo truststore and credential (in +pki.properties+). Add regular truststore and certificate.
- Set a desired bind address, port and external address in +unityServer.conf+.
- If demo content loading was enabled - remove it and disable creation.
- Consider configuring a MySQL/PSQL database instead of the default H2.
- After the first start consider commenting out the default admin user creation. You should use it only
if you accidentally remove your last user with administrative privileges. 


=== How to login to the Admin Console?

Navigate your browser to:

   https://your-unity-host:2443/console/
   
Of course if you changed the port use the one you set. Default login and password are provided in the 
+unityServer.conf+ file. Note that you will be asked to change them immediately after logging in.

Also note that the path +/console+ can be reconfigured: this is the location of the Admin Console endpoint, and you can set 
this path freely for each Unity endpoint.

=== How to work with Unity

. Make note on what you want to do with Unity:
.. what are the planned clients, what protocols are going to be used to access Unity by those clients?
.. whether external authentication services are going to be used, which ones, and with what protocols?
. Design the internal DB schema (attribute types, groups structure, attribute classes).
. Enable proper authenticators, and
. required endpoints.

=== Understanding Unity

What are the most important elements of the system to configure? The following diagrams should introduce you to
endpoints and authenticators:

image::./figures/fundamental-1.png[alt="The most important components of Unity",align="center",scaledwidth="50%"]

A concrete example of the above schema can be as follows:

image::./figures/fundamental-example.png[alt="Example diagram of an endpoint with two authenticators",align="center",scaledwidth="50%"]

*Endpoints* are the modules which are entry points to Unity. We can divide endpoints into two categories:
*Identity provider (IdP)* endpoints and *Services*. IdPs provide fundamental Unity features to clients 
(often called relaying parties). Services are a catch-all term for endpoint providing remaining functionalty. 

Each endpoint has its *binding* the low level access protocol which can be for instance _web_ 
(designated for web-browsers) or _SOAP_ (for web service clients). 
Example of endpoints are SAML IdP endpoint (allows relying services to authenticate 
their users with SAML) with the web binding or the Admin Console endpoint (again with the web binding) which provides
an embedded administration UI.

Each endpoint's authentication is configured by associating it with *authenticator*(s). 
It is possible to set more then one on endpoint to provide alternative authentication possibilities. 
It is also possible to group authenticators together to require providing of several credentials simultaneously (MFA) - 
this is done using *authentication flows*(s) on endpoints.

The authenticators can be local or external. Local authenticator checks the credential against 
a data stored in the local Unity database. On the other hand an external authenticator uses a 3rd party service 
to check the credential. Examples of such remote services are LDAP or remote SAML IdP. 
In this case a more complicated authenticator configuration is required.  


=== What to read next

If you want to learn more about integration with external identity systems, the separate 
<<saml-howto#,SAML HOWTO>> is the best starting point.

It is also good to play with the Admin Console to get familiar with the features offered there.
