[[endpoints]]
== Consumer access: the endpoints

Endpoints make Unity features accessible to the outside world. There are several endpoint 
implementations (or types) and each of them can be deployed multiple times under different addresses
with different settings. Such a deployed and configured endpoint type is simply called _endpoint_ or
_endpoint instance_.

Each endpoint supports a _binding_. Binding defines an access mechanism (e.g. SOAP Web Service or 
Web browser interface) and a technology in which it is programmed. Endpoints with the same binding
share some basic configuration options.

Endpoints are configured in the main configuration file. An example endpoint definition:

----
unityServer.core.endpoints.1.endpointType=WebConsoleUI
unityServer.core.endpoints.1.endpointName=UNITY administration interface
unityServer.core.endpoints.1.contextPath=/console
unityServer.core.endpoints.1.endpointConfigurationFile=conf/console.json
unityServer.core.endpoints.1.endpointAuthenticators=oauth;passwordWithSMS
----

The endpoint instance configuration must specify the endpoint type (in the example it is +WebConsoleUI+), one 
of the available ones. Each available endpoint has a separate subsection later on, which provide its 
type name. The endpoint instance must be named (any string) - the name is displayed in various user interfaces.

Endpoint context path defines the first element of a server relative address of an endpoint. E.g. for the
above context path +/console+, all URLs of the endpoint instance will start with the URL 
+pass:[https://unity-hostname:unity-port/console/...]+.

Endpoint configuration file is used to specify endpoint type-specific configuration, including the 
binding specific settings.

The final configuration element of all endpoints is the configuration of authentication flows. Endpoint
can have many _alternative_ authentication flows enabled. Names of those must be separated with semicolon. 
As a shortcut endpoint may have individual atuhenticators assigned instead of flows (or mixed with them). 
Assigning an authenticator will create an ad-hoc flow with a single factor authentication, with the authentication 
options of the authenticator.

In the above example the endpoint allows for choosing between two authentication methods: one will use a single 
authenticator +oauthWeb+ and another alternative will require authentication using authentication flow 
+passwordWithSMS+, which most likely is defined to use 2FA.

=== Common options for endpoints
 
As it was mentioned there are options which are common for all endpoints with the same binding.
Those options are presented here, the endpoint sections later on do not contain them.  
 
For the REST endpoints the common options are:
include::ref-restEndpointProperties.txt[]

Options reference for all Web (Vaadin) endpoints are as follows:

include::ref-vaadinEndpointProperties.txt[]

Currently there are no common options for Web Service endpoints.

[[endpoints-authn]]
=== Configuration of web authentication screen 

Web endpoints (besides settings relevant for the particular type of the endpoint, what is covered below) share a
number of common settings. Those settings control:

 - what (if any) registration possibilities are enabled for the endpoint
 - custom theme and web resources location for the endpoint (see <<branding>> for details)
 - how to arrange authentication options on the authentication screen

The last point constitutes the majority of the configuration options. In principle the authentication options
(provided by authenticators configured for the endpoint) can be arranged in one or more columns.
By default all options are shown in a single column. This is fine with a single option, but when having more 
some fine tuning is often desired.
 
The following screenshot shows an authentication screen with a single column:

image::./figures/authn-1col.png[alt="Authentication screen with a single column",align="center",scaledwidth="50%"]

Configuration of the above example is as follows (note that it is also localized to Polish language):

----
unity.endpoint.web.authnScreenTitle=Login to your profile
unity.endpoint.web.authnScreenTitle.pl=Zaloguj się do zarządzania kontem
unity.endpoint.web.authnScreenShowAllOptions=false

unity.endpoint.web.authnScreenOptionsLabel.OR.text=OR
unity.endpoint.web.authnScreenOptionsLabel.OR.text.pl=LUB

unity.endpoint.web.authnScreenColumn.1.columnWidth=15
unity.endpoint.web.authnScreenColumn.1.columnContents=pwdWeb1 _SEPARATOR_OR oauthWeb.google oauthWeb.fb oauthWeb.gh oauthWeb.ms
----

When allowing access to a federation with many tens, or hundreds of authentication options, having all of them as 
individual entries would clutter the screen and make it loading very slowly. Therefore a special grid component is
provided, which can be used to group many entries in a column. 
This is shown on the following example, using two columns.

image::./figures/authn-2col.png[alt="Authentication screen with two columns",align="center",scaledwidth="50%"]

Configuration of the example:

----
unity.endpoint.web.authnScreenTitle=Login to your profile
unity.endpoint.web.authnScreenShowSearch=true
unity.endpoint.web.authnScreenShowAllOptions=false

unity.endpoint.web.authnScreenOptionsLabel.OR.text=OR
unity.endpoint.web.authnScreenOptionsLabel.OR.text.pl=LUB

unity.endpoint.web.authnGrid.G1.gridContents=samlWeb
unity.endpoint.web.authnGrid.G1.gridRows=10

unity.endpoint.web.authnScreenColumn.1.columnSeparator=OR
unity.endpoint.web.authnScreenColumn.1.columnWidth=17
unity.endpoint.web.authnScreenColumn.1.columnContents=pwdWeb1

unity.endpoint.web.authnScreenColumn.2.columnSeparator=
unity.endpoint.web.authnScreenColumn.2.columnWidth=34
unity.endpoint.web.authnScreenColumn.2.columnContents=_GRID_G1
----

Number of columns to use is free to be changed, typically one or two are used. Contents of columns can 
be flexibly arranged. Typically entries are individual authentication options. However there is a plenty of other options,
here is the complete list:

. +authenticatorID+ or +authenticatorID.ENTRY+ - base element: either id of authenticator (then all options from this
authenticator are added) or authenticator with a single option. The latter is useful when using an SAML or OAuth 
authenticators which often expose more then one option.
. +_SEPARATOR+ or +_SEPARATOR_ID+ - allows for separating entries with an empty slot or a text element.
. +_HEADER_ID+ - allows for setting a title for subsequent entry(ies).
. +_LAST_USED+ - dynamic element, which show authentication option which was previously used by a returning user.
. +_GRID_ID+ - element allowing for showing big amounts of authentication options, typically used in case of federation login.
. +_REGISTER+ - inserts sign in button.

A very useful feature (by default turned on, controlled with +unity.endpoint.web.authnShowLastOptionOnly+)  
helps returning users by hiding all options but the one previously used. User still has an option to revel all
available options.

Note that all separators and headers are automatically hidden if their corresponding authentication options are 
missing. Also empty columns are not shown. 

More advanced customization of the authentication screen look can be performed with custom theme, see <<branding>>. 
You will find that all elements on the authentication screen have their individual HTML classes, and so 
it is possible to customize branding to a very high degree.   

=== Preselected & automated authentication

In many cases authentication screen of an Unity endpoint holds more then one authentication option. 
The last used option is saved in user's cookie. Additionally Unity supports a special query attribute 
+uy_select_authn+ which can be used for any web endpoint to select one of available authentication option.
A value of this parameter must be formed according to the following pattern: +authenticatorId.authenticationOptionId+.

For instance to preselect a remote OAuth provider under key +google+ in configuration of an authenticator with id 
+oauthWeb+ one would need to add a query parameter +uy_select_authn=oauthWeb.google+.
If in doubt, it is always possible to check the available values by manually trying to authenticate with 
authentication option of choice and verify the cookie set by Unity with the last authentication option used -- 
the value format is the same.

Unity allows also for acting as an invisible authentication proxy. This can be useful when (sets of) clients should use
a fixed upstream IdP, while Unity should still handle all the authentications (for whatever reasons, as attributes 
unification or protocol bridging). Such mode of operation is only available with remote 
(i.e. non-interactive from Unity PoV) authentication methods: remote SAML and remote OAuth authentication.

The automated proxy authentication may be enabled in two ways. The first option is to add a special, additional
query parameter +uy_auto_login=true+. Other possibility is to enable automatic authentication within endpoint's 
configuration with +unity.endpoint.web.autoLogin=true+ setting. In any of case the target endpoint 
either must be configured with a single authenticator, with a single authentication option 
(e.g. OAuth authenticator with a single trusted provider) or the mentioned above +uy_select_authn+ 
query parameter must be additionally used to select the desired authentication option. 


=== Web IdP endpoints

Unity offers couple of web endpoints which are used when remote service authenticates web user against Unity. 
The most significant examples are OAuth2 Authorization Server endpoint and SAML endpoint.

All IdP web endpoints have rather simple UI and share some of the common features. User can be presented 
with two screens. 

On the first one (rather rarely used feature) user can select active value for an attribute or attributes. Typical 
use case is to allow user to select active role for the session. Configuration of the active value selection screen
can be different per client (e.g. using the screen only for selected clients, or even presenting different attribute
for value selection depending on a client). Of course the screen can be completely disabled what is the default behavior. 

The 2nd screen in order (more often used) is a consent screen. User is presented with information who is requesting 
the authentication and what data will be shared with the requesting service. Details of the consent screen vary between
IdP endpoints, e.g. OAuth endpoint shows requested scopes, while SAML endpoint doesn't. Users can save the consent 
decision and then consent is skipped for them. It is also possible to turn off the consent screen completely.   

include::output-translation.txt[]


include::endpoint-console.txt[]

include::endpoint-home.txt[]

include::endpoint-upman.txt[]

include::endpoint-saml.txt[]

include::endpoint-oauth.txt[]

include::endpoint-jwt.txt[]

include::endpoint-restadmin.txt[]

include::endpoint-restupman.txt[]

include::endpoint-wellknown.txt[]

include::endpoint-scim.txt[]


