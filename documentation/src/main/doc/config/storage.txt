[[db-conf]]
=== Storage configuration

Unity currently supports Relational Database Management System (RDBMS) as backend storage.

The database configuration is provided in the main +unityServer.conf+ file.

Note that addition to database backup the Admin Console provides a possibility to create a JSON dump of the complete server state, and to restore the system from such dump.

 
==== RDBMS storage backend

The following databases are supported: 

. H2 (embedded, no setup required)
. MySQL
. MariaDB
. PostgreSQL

RDBMS service is stable, quite fast and offers an excellent ecosystem of maintenance supporting tools (backups, redundancy, etc) which is available for the mature RDBMS technology.

The following table enumerates all configuration options for the RDBMS backend. 

include::../ref-storeRDBMSProperties.txt[]

The remaining part provides more insight into specific setup of databases used by Unity. Note that if the simple 
embedded H2 database is used no special setup is required - it works out of the box. However is not recommended
for production use as handling backups and redundancy is very problematic with it.


===== MySQL setup

Unity can work with:

. MariaDB: for Unity version 2.0.0 -- 2.4.x, the minimum supported version of MariaDB is 10.2.1. 
Since the Unity release 2.5.0 version 5.3 version of MariaDB should be fine.
. Oracle's MySQL, the minimum supported version is 5.6.4. 

The setup of MySQL requires creation of a database with a separate user which is able to connect to the database.
In mysql console (when logged with admin privileges) execute following commands:
 
 CREATE DATABASE unitydb;
 CREATE USER 'unity'@'localhost' IDENTIFIED BY 'unitypass';
 GRANT ALTER, CREATE, DELETE, DROP, EXECUTE, INDEX, INSERT, LOCK TABLES, 
    SELECT, TRIGGER, UPDATE, REFERENCES, CREATE ROUTINE, EXECUTE ON unitydb.* to 'unity'@'localhost';

using the desired database name, username and password. If the database is on a different host then the Unity instance,
change to localhost to a proper host of Unity installation or use +%+ to allow connections from any host.  

Test if the connection works with:

 mysql -p -u unity unitydb

and give the password.

Unity server will setup all tables automatically on startup.

To configure Unity to use the database change the database JDBC URI as well as add the username, password and dialect:
 
----
unityServer.storage.engine=rdbms
unityServer.storage.engine.rdbms.jdbcUrl=jdbc:mysql://localhost/unitydb
unityServer.storage.engine.rdbms.dialect=mysql
unityServer.storage.engine.rdbms.username=unity
unityServer.storage.engine.rdbms.password=unitypass
----

Note: For certain authentication types it may be necessary to provide server's public key or to use the 
+?allowPublicKeyRetrieval=true+ connection option (which however should never be used if the server 
is accessed through public network). Refer to MariadB driver's documentation for all available connection options
https://mariadb.com/kb/en/about-mariadb-connector-j/

===== MariaDB setup

MariaDB is a fork of MySQL DB and so the same considerations apply as described in the MySQL setup section above.
The only difference is that the following URI should be used to connect to MariaDB:

----
unityServer.storage.engine.rdbms.jdbcUrl=jdbc:mariadb://localhost/unitydb
----

The +dialect+ option shall be set to +mysql+ value.

===== PostgreSQL setup

The setup of PostgreSQL (Unity should be compatible with any recent version) 
requires creation of a database with a separate role (user) 
which is able to connect to the database. Typically on Linux system you have to invoke:

 createuser -P unity
 createdb -O unity unitydb
 
using the desired database name, username and password. Of course any other tool can be used to create the user and
database. Finally note that Postgres must allow for password authentication for the Unity user. Ensure that
in +pg_hba.conf+ you have a lines similar to those two:

 host   all         all         127.0.0.1/32          md5
 host   all         all         ::1/128               md5

If the database is on a different host then the Unity instance, change IP addresses to a proper ones.  

Test if the connection works with:

 psql -h localhost unitydb unity

and give the configured password.

Unity server will setup all tables automatically on startup.

To configure Unity to use the Postgres database change the default database JDBC URI as well as 
add the username, password and dialect:
 
----
unityServer.storage.engine=rdbms
unityServer.storage.engine.rdbms.jdbcUrl=jdbc:postgresql://localhost/unitydb
unityServer.storage.engine.rdbms.dialect=psql
unityServer.storage.engine.rdbms.username=unity
unityServer.storage.engine.rdbms.password=unitypass
----

