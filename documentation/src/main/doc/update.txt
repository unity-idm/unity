== Update

This section covers a general update procedure. Make sure to read version specific update instruction too: 
<<ver-update>>. If you are updating with a revision release (change of the version number after the last dot only, 
e.g. 1.3.0 -> 1.3.1 or 9.11.2 -> 9.11.5) you can skip to the simplified <<revision-update>> instruction.

The update is a potentially dangerous operation, therefore we suggest to take two precautions:

. *MANDATORY* make a full database backup _before_ starting the update.
. *SUGGESTED* make a test drive. To do this you need a separate instance of Unity service, with database copied from 
the production one. Update it first and only if everything goes OK, proceed with an update of the production instance.

After the precautions are done the update instructions are following.

When using the +.tar.gz+: 

. Install the updated version in a separate directory as in the case of a fresh installation.
. Configure it with the settings of the running instance. Copy the config files of the old version and 
(if required) made any version specific modifications which are given below. 
. Stop the old service.
. Start the new instance.
. Carefully check log files for any errors or warnings.
. If needed reconfigure startup scripts to start the updated service, as well as update the +PATH+ variable to use
new Unity binaries location. It is a good practice to have a symbolic link to the actual Unity installation directory
that is used in the +PATH+ and startup scripts. Then it is possible to simply change its target to the updated 
service directory.

If using the RPM: 

. Stop the old service.
. Update the RPM using platform tools (usually +yum+).
. Check if any configuration files needs to be updated (see below, also search for +.rpmnew+ files in /etc/unity-idm).
. Start the new service.
. Carefully check log files for any errors or warnings.

[NOTE] 
The database dump can be created and loaded from the Web Admin UI, from the _Server maintenance_ tab. It can be used 
to transfer the Unity state between instances, can be also used as a backup tool. However in the upgrade case
it is strongly suggested to make a regular database dump.

[[revision-update]]
=== Revision (bugfix) update

From time to time a revision version of Unity is released. Such version is marked with a change of the last 
number in the distribution version only. When installing such revision release a simplified procedure can be
taken. Database backup is advised as always, though in revision update the risk is minimal - revision releases
typically do not introduce database changes.
  
When using the +.tar.gz+: 

. Unpack the updated release
. Stop the server
. Replace the contents of the server's +lib/+ directory with the contents of the +lib/+ directory of the updated package.
. Start the server

When using RPM distribution it is enough to update the package with your package manager and restart the server. 

[[ver-update]]
=== Version specific update instructions

[NOTE]
The last component in the version string is irrelevant for the following instructions. For instance instructions
for the 1.2.0->1.3.0 applies also to 1.2.0->1.3.1 and all other 1.3.x versions.

==== From 2.x to 2.y

Please check documentation of the 2.y version. Below we are only focused on Unity 3 updates. 

==== From 2.x to 3.0.0

===== No reloads by default upon restart from config files

This is new behavior in version 3. It can be turned off by adding:

-----
unityServer.core.useConfiguredContentsOnFreshStartOnly=false
-----

to +unityServer.conf+. It might be needed temporary when upgrading to load new config options, or when 
it is preferred to use config files to set up system in the Unity 2 way.    

===== Admin UI -> Admin Console

Admin UI is deprecated and will be removed in subsequent versions. It 
It is disabled in a default configuration file of Unity 3.0 and replaced by a new endpoint: Admin Console. 
By default it is exposed on a +/console+ path. It is strongly suggested to enable this endpoint in the upgraded system
and afterwards undeploy Admin UI.

Example configuration:

----
unityServer.core.endpoints.consoleUI.endpointType=WebConsoleUI
unityServer.core.endpoints.consoleUI.endpointConfigurationFile=${CONF}/modules/core/console.properties
unityServer.core.endpoints.consoleUI.contextPath=/console
unityServer.core.endpoints.consoleUI.endpointRealm=adminRealm
unityServer.core.endpoints.consoleUI.endpointName=UNITY console administration interface
unityServer.core.endpoints.consoleUI.endpointAuthenticators=pwd;cert
----

Note that above setting won't be picked up on upgraded system: see above for explanation and workaround. Another workaround
is to login to the legacy Admin UI, and deploy the Console endpoint from the System Management-> Endpoints tab.
Afterwards Admin UI can be dropped or used in parallel with Console.
 

==== From 3.0 to 3.1 or 3.2

No special considerations, besides the generic ones.

==== From 3.2 to 3.3

In version 3.0-3.2 Unity was using under the hood two themes: sidebarTheme and unityThemeValo. The former one was used
by UpMan and Console endpoints. In version 3.3.0 the styles were unified, and all endpoints are using unityThemeValo.
The sidebarTheme was dropped.

Those changes most likely won't require any action, unless sidebarTheme was used as a base theme for customizations.
In such case customized theme needs to be modified to be based on unityThemeValo (although we advise to always depend
on the +common+ mixin, which contains almost everything the unityThemeValo has.

Also note that a new unified look and feel across all endpoints is now adopted, what changes default appearance of 
many user facing UI views, in the first place the authentication screen.  

==== From 3.3 to 3.4

===== AdminUI dropped

Version 3.4 drops AdminUI support completely. Before the upgrade make sure to:

* deploy Admin Console endpoint, which is its replacement (suggested since the 3.0.0 release)
* remove AdminUI from configuration files, if it is still there

Note that DB migration will drop all stored AdminUI endpoints that are found in DB.

Version 3.4 also migrates all +jpegImage+ attributes to the newer and more flexible +image+ attribute type. 
This change requires no special action, although be aware that from that version image attributes can
be exported over OAuth and SAML interfaces, and OAuth clients logo can use compression format like PNG improving its quality.

===== Change of the default for the TLS wantClientAuthn option

Since version 3.4 Unity the default value for the option +unityServer.core.httpServer.wantClientAuthn+ is +false+,
while previously it was +true+. This option controls whether client-side X.509 certificates are accepted 
and so can be used for the X.509 credential authentication. 

The change of default was caused by several problems caused by this setting. Among others there are problems
with the Safari web-browser showing a popup to their users accessing a server with the aforementioned TLS feature 
enabled. What is more the recently introduced support for FIDO2 security keys also doesn't work well in case of 
some keys with that feature turned on.

Installations relaying on default config settings for this feature, need to add the following option to +unityServer.conf+: 

----
unityServer.core.httpServer.wantClientAuthn=true
----


==== From 3.4 to 3.5

===== Server logging configuration changes

3.5 release contains revised logging. There were several changes, which may require the +log4j.xml+ update:

1. Additional logging facility categories were added, so that logging configuration can be precise without configuring individual logging facilities.
2. +unity.server+ category is no longer directly used by any facility. It is from now only used to control default logging level for all Unity facilities.
3. Several new loggers were added
4. Logging levels were updated in several cases (mostly DEBUG -> INFO and INFO -> DEBUG) so that the default configuration makes more sense.  

In general all custom configurations entries using category +unity.server+ (e.g. +unity.server.AuditManager+) will need to be updated. 
Below is a list of all logging facilities formerly in +unity.server+, with their new logging category. 


====== Change +unity.server+ -> +unity.server.upman+:

+unity.server.ProjectController+
+unity.server.GroupsController+
+unity.server.ProjectInvitationsController+
+unity.server.GroupMembersController+
+unity.server.UpdateRequestsController+
+unity.server.DelegatedGroupsHelper+
+unity.server.ProjectAttributeHelper+

====== Change +unity.server+ -> +unity.server.db+:

+unity.server.AuditEventRDBMSStore+

====== Change +unity.server+ -> +unity.server.web+:

+unity.server.SMSCredentialEditor+
+unity.server.AuthenticatorsController+
+unity.server.InputTranslationsController+
+unity.server.AuditEventsView+


====== Change +unity.server+ -> +unity.server.externaltranslation+:

+unity.server.TranslationProfileInstance+


====== Change +unity.server+ -> +unity.server.forms+:

+unity.server.EnquiryTargetCondEvaluator+
+unity.server.SharedEnquiryManagment+
+unity.server.AutomaticInvitationProcessingSupport+
+unity.server.RegistrationConfirmationRewriteSupport+
+unity.server.RegistrationRequestPreprocessor+
+unity.server.RegistrationsManagementImpl+
+unity.server.SharedRegistrationManagment+
+unity.server.SetEntityStateActionFactory+
+unity.server.BaseRequestPreprocessor+
+unity.server.PolicyAgreementsValidator+
+unity.server.SharedEnquiryManagment+


====== Change +unity.server+ -> +unity.server.authn+:

+unity.server.AuthenticationProcessorImpl+
+unity.server.AuthenticatorsRegistry+
+unity.server.AuthenticatorSupportServiceImpl+
+unity.server.RemoteAuthnResultProcessorImpl+
+unity.server.AdditionalAuthenticationService+
+unity.server.LoginToHttpSessionBinderImpl+
+unity.server.SessionManagementImpl+
+unity.server.UnsuccessfulAuthenticationCounter+
+unity.server.AddParticipantToSessionTask+
+unity.server.CompositePasswordVerificator+
+unity.server.CredentialResetBase+
+unity.server.CertificateVerificator+
+unity.server.PasswordVerificator+
+unity.server.SMSVerificator+

====== Change +unity.server+ -> +unity.server.audit+:

+unity.server.AuditEventListener+
+unity.server.AuditManager+
+unity.server.AuditPublisher+


====== Change +unity.server+ -> +unity.server.notification+:

+unity.server.ClickatellChannel+
+unity.server.GroovyNotificationChannel+
+unity.server.EmailFacility+
+unity.server.NotificationProducerImpl+


====== Change +unity.server+ -> +unity.server.userimport+:

+unity.server.SingleUserImportHandler+
+unity.server.UserImportServiceImpl+

====== Change +unity.server+ -> +unity.server.script+:

+unity.server.GroovyRunner+
+unity.server.MainGroovyExecutor+
+unity.server.MockGroovyBindingProvider+


====== Change +unity.server+ -> +unity.server.event+:

+unity.server.EventProcessor+
+unity.server.EventsProcessingThread+

====== Change +unity.server+ -> +unity.server.confirmation+:

+unity.server.RegistrationEmailFacility+
+unity.server.MobileNumberConfirmationManagerImpl+
+unity.server.EmailConfirmationManagerImpl+

====== Change +unity.server+ -> +unity.server.bulkops+:

+unity.server.BulkQueryServiceImpl+
+unity.server.CompositeEntitiesInfoProvider+
+unity.server.BulkProcessingExecutor+
+unity.server.BulkProcessingSupport+
+unity.server.ChangeStatusActionFactory+
+unity.server.RemoveEntityActionFactory+
+unity.server.SendNotificationActionFactory+

====== Change +unity.server+ -> +unity.server.core+:

Everything else not mentioned above.

====== Other changes

The logging facility showing loading of HTTP server related properties was changed as follows:
+unicore.configuration.HttpServerProperties+ -> +unity.server.config.UnityHttpServerConfiguration+

==== From 3.5 to 3.6

There are no manual actions required for this upgrade.

==== From 3.6 to 3.7

There are no manual actions required for this upgrade.

==== From 3.7 to 3.8

===== Remove credentials for public OAuth clients
In version 3.8.0 many OAuthn changes are provided, making OAuth implementation better complying with standards 
and offering an improved security. One important change is that since this version, the public OAuth clients 
using PKCE don't need to authenticate with a client credential. 

It is strongly recommended to remove credentials assigned to such public OAuth clients, as having such credentials 
set, may easily lead to an insecure setup (depending on other configuration options).

===== Define refresh token policy for OAuth IdP

OAuth authorization service (IdP) can support offline_access scope, which gives refresh token issuance control to 
OAuth client. OAuth endpoints which are deployed will be migrated without any user action, preserving 
the existing setting which is either to never issue refresh tokens, or to issue them always.

There is a manual change required if endpoints are configured from a properties file. In such case for each endpoint 
one change has to be applied. 

If the setting +unity.oauth2.as.refreshTokenValidity+ had a _negative_ value (what in previous versions meant that
refresh token should not be issued) then remove +unity.oauth2.as.refreshTokenValidity+ option and instead add a new option:

----
unity.oauth2.as.refreshTokenIssuePolicy=NEVER
----

Otherwise, if the setting +unity.oauth2.as.refreshTokenValidity+ had a _non negative_ value 
(what in previous versions meant that refresh token should be always issued) then preserve the 
+unity.oauth2.as.refreshTokenValidity+ option with no change and add a new option:
 
----
unity.oauth2.as.refreshTokenIssuePolicy=ALWAYS
----

Of course the above covers only a migration preserving the previous version behavior. It is also possible to switch to 
offline scope based refresh token issuance.

==== From 3.9 to 3.10

Version 3.10 changes modules available in HomeUI endpoint. Former 'oauthToken' and 'preferencesTab' modules are replaced 
with a single, user-friendly module named 'trustedApplications' module.

If HomeUI endpoints is used, and its configuration is loaded from a properties file (instead of management via Console) an update 
of the properties file may be necessary. It is needed then to verify if the old modules 'oauthToken' or 'preferencesTab' were 
disabled configuration. If this is the case replace them with disabling the 'trustedApplications' module. Note that it is impossible 
to disable only one part of the functionality any more.


==== From 3.10 to 3.11

Version 3.11 is Java 17 compatible (both Java 11 and 17 can be used to run Unity). One user facing change that was required to 
bring Java 17 compatibility was update of Groovy to version 3.0.12 (previously version 2 was used). This should be an invisible 
change for majority of Unity users, however if you enhanced Unity with Groovy scripts, please make sure to read this document and 
verify if your scripts will require an update: https://groovy-lang.org/releasenotes/groovy-3.0.html. Mostly the bottom part is 
important covering "breaking changes".    


 