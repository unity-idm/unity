== Update

This section covers a general update procedure. Make sure to read version specific update instruction too: 
<<ver-update>>. If you are updating with a revision release (change of the version number after the last dot only, 
e.g. 1.3.0 -> 1.3.1 or 9.11.2 -> 9.11.5) you can skip to the simplified <<revision-update>> instruction.

The update is a potentially dangerous operation, therefore we suggest to take two precautions:

. *MANDATORY* make a full database backup _before_ starting the update.
. *SUGGESTED* make a test drive. To do this you need a separate instance of Unity service, with database copied from 
the production one. Update it first and only if everything goes OK, proceed with an update of the production instance.

After the precautions are done the update instructions are following.

When using the +.tar.gz+: 

. Install the updated version in a separate directory as in the case of a fresh installation.
. Configure it with the settings of the running instance. Copy the config files of the old version and 
(if required) made any version specific modifications which are given below. 
. Stop the old service.
. Start the new instance.
. Carefully check log files for any errors or warnings.
. If needed reconfigure startup scripts to start the updated service, as well as update the +PATH+ variable to use
new Unity binaries location. It is a good practice to have a symbolic link to the actual Unity installation directory
that is used in the +PATH+ and startup scripts. Then it is possible to simply change its target to the updated 
service directory.

[NOTE] 
The database dump can be created and loaded from the Web Admin UI, from the _Server maintenance_ tab. It can be used 
to transfer the Unity state between instances, can be also used as a backup tool. However in the upgrade case
it is strongly suggested to make a regular database dump.

[[revision-update]]
=== Revision (bugfix) update

From time to time a revision version of Unity is released. Such version is marked with a change of the last 
number in the distribution version only. When installing such revision release a simplified procedure can be
taken. Database backup is advised as always, though in revision update the risk is minimal - revision releases
typically do not introduce database changes.
  
When using the +.tar.gz+: 

. Unpack the updated release
. Stop the server
. Replace the contents of the server's +lib/+ directory with the contents of the +lib/+ directory of the updated package.
. Start the server

[[ver-update]]
=== Version specific update instructions

[NOTE]
The last component in the version string is irrelevant for the following instructions. For instance instructions
for the 1.2.0->1.3.0 applies also to 1.2.0->1.3.1 and all other 1.3.x versions.

==== Updates to versions 2.x

Please check documentation of the 2.x version. Below we are only focused on Unity 4 updates. 

==== Updates to versions 3.x

Please check documentation of the 3.x version. Below we are only focused on Unity 4 updates. 


==== From 3.LATEST to 4.0

===== Java platform requirement

The minimum Java version required to run Unity 4.0.0 is Java 17.


===== Custom styling and branding

Unity 4 completely changes the web rendering technology. While it is still Vaadin based, the new generation is not using under the hood the GWT framework, all components were fully recreated.

All UI customizations needs to be recreated from scratch, basing on the Unity 4 branding documentation. Here we only provide a list of most notable changes:

* In general the whole infrastructure around custom styling is much simpler in Unity 4.
* Styling is done with plain CSS. SAAS/SCSS and compilation of styles is not needed.
* Freemarker templates are not used to wrap Unity pages with custom headers, footers etc. Instead separate HTML panels can be configured as frames of the main UI.
* CSS is controlled with simple files which can be set on global and/or endpoint level. Concept of "theme" is not used anymore. 

===== Configured images/logo

In many cases placement and configuration of images used in various places of Unity configuration will need to be updated. In particular:

* All images configured with simple local paths 
* All images configured using +file:+ URLs

The migration is generally straightforward:

. Place all your images in the +webContents/+ directory of the Unity 4 installation. The default sub-folder +assets/img/+ may be used to group them, but it is not mandatory.
. Update all paths to images in configuration files or through console. Set the new path. 

For example a Unity 3.x file placed in +webContents/VAADIN/themes/common/img/logo.png+ can be placed in Unity 4 in +webContents/assets/img/logo.png+. Then old paths referencing it (either +file:../common/img/logo.png+ or +../common/img/logo.png+) shall be replaced with +assets/img/logo.png+.

NOTE: pay attention to images configured as endpoint logos. In many cases those will need to be updated.


===== UNICORE IdP endpoints dropped

UNICORE IdP endpoints (variants of the SAML IdP endpoints, with UNIOCRE specific enhancements) were dropped. UNICORE since version 9
can use the plain SAML IdP endpoint of Unity. Make sure to drop all UNICORE specific endpoint from your configuration before upgrading:

* If using file configuration remove the endpoints definitions in there and restart the server
* If using Console managed configuration of endpoints, remove those IdP endpoints in console

Most likely those endpoints should be replaced with regular SAML IdP endpoints (SOAP/Web as appropriate).  

Unity v4.0+ won't start if any UNICORE endpoint is still present in configuration or database.

===== Changed policy documents URLs

Public links to exposed policy documents has been changed as follows:

OLD:
 
----
https://<UNITY>/unitygw/pub?id={policyId}#!policyDoc+
----

NEW:

----
https://<UNITY>/unitygw/pub/policyDocuments/{policyId}
----


===== Migration in case of H2 users

Users of H2 database (which can be part of test/demo/evaluation etc. deployments) can not update to version 4 
by just running the new version of the server on the old database. A breaking upgrade of the H2 DB engine 
prevents that.

Trying to use the Unity 3.x database with Unity 4 will result in many errors, which will include the string:

----
The write format 1 is smaller than the supported format 2
----

(there will be also many other errors, some of which will be in language specific to server's locale).

To migrate the H2 database contents, it needs to be first exported to JSON dump, what can be done 
using Maintenance -> Backup & restore in the admin's console of the 3.x version. 
Creating a complete database dump is needed. 

After the dump is created, a regular software update can follow, and Unity 4 can be started on 
an empty H2 database. Then contents can be restored, again using admin's console,
Maintenance -> Backup & restore functionality.  

===== Separate MySQL and MariaDB connectors

As MariaDB and MySQL are diverging more and more, since Unity 4 separate drivers are provided for both databases.

A database URI using scheme: 

----
jdbc:mysql:
----

will be handled by the MySQL Java Connector. In case when MariaDB is used, we advise to switch the DB URI to use scheme:

----
jdbc:mariadb:
----

In this case MariaDB connector will be used.


