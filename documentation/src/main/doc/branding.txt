[[branding]]
== Web interface customization and branding

Unity interface appearance can be customized to match the owning organization preferences.
There are several options (which can be combined) to perform such customizations:

* Change of the default CSS style, allowing for customizing colors, decorations and sizing of the whole UI.
* Customization of the Unity main UI by adding top, bottom, left and right panels.
* Favicon can be customized.
* All messages produced by Unity can be changed and new translations can be created.


=== Accessing local resources & web assets

Files with custom resources like images or fonts can be served by Unity after placing them in the web contents directory.

When referencing such resources from the configuration file, all relative paths will be resolved automatically against the web contents directory.

The situation is more complex when a resource file needs to be referenced from a CSS file or custom HTML frame. The file will be loaded directly by a web browser, so a proper base path needs to be prepended to each file path manually. To simplify this task, all files from the web contents directory are available from the always available (i.e., not specific to any dynamic endpoint) +/unitygw/+ path. Therefore, the following path should be used, e.g., in a custom CSS to reference a file +example.png+ placed directly in the web contents directory root:

----
../unitygw/example.png
----  

Note the leading "../": it is needed to go one level up, from an endpoint specific context path.


=== Modification of web page styling

Styling customization is achieved by providing a custom, plain CSS file. The CSS rules from this file are added after all other default CSS rules. The custom CSS file should be placed in the configured web contents directory. 

It is possible to configure a shared CSS for a whole server in as follows in +unityServer.conf+:

----
unityServer.core.customCssFileName=custom.css
----

What is more each endpoint can have its own custom CSS, used _in addition to_ the global one (if it is defined). For instance: 

----
unity.endpoint.web.customCssFileName=custom-endpoint.css
----

==== Custom CSS preparation hints

Contents of the new CSS is arbitrary and simple changes can be made after inspection of the Unity UI in the browser's web tools.

* In case when certain styles shall be applied to the authentication screen only, it is useful to use the HTML class +u-authn-screen+, which is always present on the (mostly) root HTML element of each authentication screen. 
* Checking the default Unity +styles.css+ will provide information on many useful CSS variables.
* In case of more complex redesign it might be useful to know that Unity default theme is based on the Lumo Vaadin theme. It is documented in here: https://vaadin.com/docs/latest/styling[Lumo documentation]. Among others it is possible to use Lumo variables in the custom CSS, as well as use https://demo.vaadin.com/lumo-editor/[Lumo editor] to generate generic CSS which can be used to configure cross-cutting UI options. 

Couple of example CSS modifications follows:

----
/* insert a semi-transparent background image, only on the authentication page */ 
.u-authn-screen::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: #fff url("../unitygw/assets/img/favicon-64.png") repeat scroll center center;
  opacity: 0.1;
  z-index: -1;
}

/* all buttons on the authentication page shall have this style */ 
.u-authn-screen vaadin-button {
   background-color: #52A899;
   color: white;
   width: 100%;
   text-transform: uppercase;
}

/* couple of general changes, applicable to all screens */
html {	
  --lumo-font-size-xxxl: 3rem;
  --lumo-font-family: Verdana, "Verdana Ref", sans-serif;
  --lumo-size-xl: 5rem;
  --lumo-primary-text-color: rgb(0, 105, 151);
  --lumo-primary-color-50pct: rgba(0, 105, 151, 0.5);
  --lumo-primary-color-10pct: rgba(0, 105, 151, 0.1);
  --lumo-primary-color: #006997;
  --lumo-shade-90pct: hsla(214, 40%, 16%, 0.94);
  --lumo-header-text-color: #006997;
  --lumo-error-color: #FF4637;
  --lumo-success-color: #00B720;  
  --unity-font-weight: 500;
  --vaadin-text-field-default-width: 16em;
}
----

=== Controlling favicon

Configuration of favicon shall be provided in a file located in the default web contents directory (which is by default the +webContents/+ directory of distribution), in a file under path: +favicon.html+.

The file may look like the default one found in Unity's distribution:

----
<link rel="icon" type="image/png" sizes="16x16" href="../unitygw/assets/img/favicon-16.png">
<link rel="icon" type="image/png" sizes="24x24" href="../unitygw/assets/img/favicon-24.png">
---- 

Note, that contents of this file will be placed as-is in the HTML header section of the web pages generated by Unity.



=== Wrapping Unity web pages in custom frames

Unity allows for adding frames around the Unity main UI. The frames are composed from up to four panels: top, bottom, left and right. Naturally all panels are optional. 

Panel content must be a static HTML file. It is advised to use a constant height for top and bottom panels, as well as constant width for left and right ones.

Default panels can be set server-wide with the following settings in  +unityServer.conf+:

----
unityServer.core.extraTopPanel=topbar.html
unityServer.core.extraBottomPanel=bottombar.html
unityServer.core.extraLeftPanel=vertbar.html
unityServer.core.extraRightPanel=vertbar.html
----

It is also possible to define frames for an individual endpoint, in its configuration:

----
unity.endpoint.web.extraTopPanel=endp-topbar.html
unity.endpoint.web.extraBottomPanel=endp-bottombar.html
unity.endpoint.web.extraLeftPanel=endp-leftbar.html
unity.endpoint.web.extraRightPanel=endp-rightbar.html
----

There is one additional option which is helpful, if the frames are to be added only on the sign in screen of the endpoint:

----
unity.endpoint.web.addExtraPanelsAfterAuthentication=false
----

Note: as of now this configuration is not supported over Web Console, i.e. it requires file-based configuration.

[[i18n]]
=== Controlling translation of messages

Unity offers internationalization (i18) features out of the box. However, the list of available languages
is hardcoded and currently includes only English (en), Polish (pl) and German (de) locales. English locale is
the default one and all default messages are in this language. Couple of other translations are mostly complete with the
exception of the Admin Console which is English only. 
Administrator can configure which of the supported languages are enabled 
(see +unityServer.conf+ documentation for up to date list of allowed ones in <<configuration>>).

If you would like to have other locale supported please contact us via the mailing list - there is no problem to add 
them or to allow for admin-configured locales outside from those predefined in distribution. We also use Weblate at 
https://hosted.weblate.org/projects/unity-idm for collecting open source improvements to existing translations.

Actual translations are fully controlled by Unity administrator. 
In the +i18n/+ subfolder of the configuration directory a copy of all system messages is stored. 
It is possible to change any of the messages which are stored there, also including translations.
Files are grouped in several directories; the structure of those directories is hardcoded and can not be modified.
In each directory there is one +message.properties+ file with default values (the default is simply English) and
arbitrary number of files +message_LC.properties+, where +LC+ is a code of a locale of the translation. 

It is important to note how language-wise resolving of messages follows. For each message key and locale, 
Unity searches for the message value in the following order:

1. locale specific file in the configuration directory
2. default locale file in the configuration directory
3. locale specific, packaged translation (can not be modified)
4. default locale, packaged translation (can not be modified)

Note that initially (until any custom reconfigurations are performed) the two last options are the same
as the two first.

NOTE: It is advised not to modify the default messages in place, as during subsequent updates those modifications
may be lost, or, depending on update mode, the updated default messages may be ignored during update. 
Instead a separate directory may be configured for customized translations, while the default i18n directory is used 
for the reference only.   

What is more Unity allows for providing all names, descriptions and other texts which are end-user oriented 
and configurable by administrator in multiple languages. The user interface shows a small flag on
right-top edge of each translatable component. After expanding the component, the translations in all enabled
languages can be provided.

image::./figures/languages.png[alt="Unity allows for translating admin-provided names",align="center"]
