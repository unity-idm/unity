[[branding]]
== Web interface customization and branding

Unity interface appearance can be customized to match the owning organization preferences.
There are two ways (which can be combined) to perform such customizations:

* Change of the default CSS style, allowing for customizing colors, decorations and sizing of the whole UI
* Change of the default web page template, allowing for adding a custom header, footer or even side bars to the Unity UI.

IMPORTANT: Since version 3.11.0, part of Unity UI was updated to use a more recent technology: Vaadin 23+. Branding
of the updated *UpMan endpoint* is using different (and significantly simplified) configuration method than the legacy UI.
The following two sections are discussing branding in the case of the legacy endpoints as well as branding of the authentication
screen (likely the most important one). Vaadin 23 branding, specific to UpMan, is described in the section <<v2x-branding>>.
Please note, that in the version 4 of Unity all UIs will be upgraded and only the new style of branding will be used. 

=== Modification of web page styles

Customization is based on SASS http://sass-lang.com/ (a superset of CSS), using its preferred SCSS syntax. 
Theoretically it is possible to prepare the theme purely in CSS but due to complex requirements in practice 
SASS usage is mandatory.

Unity themes are placed in a configured directory. Each theme is named and the server is configured with a selected
theme as follows (in +unityServer.conf+):

----
unityServer.core.defaultWebContentDirectory=webContents
unityServer.core.defaultTheme=unityThemeValo
----

What is more the theme can be changed per endpoint in endpoint's configuration. Actually two themes can be set:
one for the main user interface and one for the endpoint's authentication screen. Endpoint
can also use a separate directory with theme files and other web resources. For instance: 

----
unity.endpoint.web.mainTheme=customTheme
unity.endpoint.web.authnTheme=customAuthnTheme
unity.endpoint.web.webContentDirectory=webContents-homeEndpoint
----

There are couple of facts that it might be useful to know:
 
* All files (e.g. images) served by Unity must be present in the web content directory used for the 
  endpoint in question. 
* While authentication screen and the main endpoint UI can have different themes the web contents directory is 
  always common.
* Sandboxed authentication UI (used during account association or during translation profile wizard run) uses
  the same theme as the endpoint's main authentication UI.
* Confirmation screen shown after email confirmation uses the default theme or the one configured separately 
  with the +unityServer.core.confirmationUITheme+ option.
* Templates used for generating generic server-wide error pages (e.g. 404 - page not found) are always using a template
  defined in the +defaultWebContentDirectory+.


==== Preparing a custom theme

Each theme is placed in a separate subdirectory of the +VAADIN/themes+ folder (placed in the web contents directory
as described above). Subdirectory must be named as the style. Unity uses the +styles.css+ file in the theme directory
as the web interface style. If the +styles.css+ is not found but there is a +styless.scss+ file then it is 
compiled on the fly to CSS and used. This later scenario is not suggested for production, see below how to compile the
theme. 

Distribution contains one production theme called +unityThemeValo+ which is based on the Vaadin's Valo theme (Vaadin
is underlying technology of the Unity's web interface). Usage of the Valo theme as the base is not mandatory,
but highly preferred and easiest choice. Valo theme is highly configurable and can be customized to a large degree.
Valo theme is documented here is: https://vaadin.com/valo and API is documented https://vaadin.com/api/valo/ .

There is also one example theme called +customTheme+.
Both of them are based on SASS partial placed in the +common+ directory. +unityThemeValo+ is simply reusing the 
whole partial as-is. +customTheme+ is introducing several small changes as disabling the 
blue background of the top bar and displaying a Unity logo there. 


Strongly suggested structure of a theme is using two SCSS files: +styles.scss+ (this name is mandatory) 
and +STYLE-NAME.scss+. The first file should merely include the definitions from the second file allowing to 
store the style in properly named file.  

Typically the custom theme should be created basing on the +customTheme+ example:

 - create a theme folder under +VAADIN/themes+ e.g. +myTheme+
 - create +myTheme/styles.scss+, +myTheme/favicon.ico+ and +myTheme/myTheme.scss+ basing on the 
 custom theme as template.
 - introduce changes in the +myTheme/myTheme.scss+
 
The +exampleTheme+ contains a lot of comments which should help to understand the structure. In case when large changes
are introduced it might be easier to copy the common partial and modify it directly.

==== Compiling SASS theme

Manual compilation of a theme is a suggested approach as it improves server performance and allow to detect 
syntax errors early.

Unity provides a simple command line utility that compiles a given theme.

----
$> unity-idm-scss-compile conf/VAADIN/themes/myTheme
----

The sole argument to the utility is a directory with the source +styles.scss+ file.


=== Customizing the template of web pages

Unity uses a Freemarker template engine to produce a web page. By default the whole visible contents of this
page is generated by Vaadin framework and this contents can not be manipulated (besides styling described above and
system configuration allowing for many customization). 

However, the 'main' interface can be wrapped with custom decorations. For instance it is possible to add a 
foot bar with logos of partners of the infrastructure using Unity.

==== Structure of a template

The default template looks as follows:

----
<!DOCTYPE html>
<html>
  <head>
    <#include "system/header-mandatory.ftl">

    <#include "system/header-std.ftl">
  </head>
 
  <body>
  
    <#assign appId="main-element">
    <#include "system/body-main-ui.ftl">
    <#include "system/body-mandatory-end.ftl">
    
  </body>
</html>
----

The statements including +system/header-mandatory.ftl+ and +system/body-mandatory-end.ftl+ files as well as 
the +assign+ instruction are mandatory and must be enclosed in the HTML head and body parts as in the default file.

The include of the +system/header-std.ftl+ is not mandatory. It can be replaced with custom contents. The default
file sets a web page title (if defined by the UI), the favicon and size of the page.
Also other header elements, as keywords can be inserted.

The body defines first a variable with HTML id of the root +div+ element where Unity displays its contents.
The subsequent include simply creates this element (it is empty as will be filled by Unity JavaScript code).
The final include adds a code necessary to load the Unity contents and is mandatory.

The modifications of the body part typically will include additional HTML code before and/or after the  
+system/body-main-ui.ftl+ include. Optionally this include can be removed, but then a +div+ element with 
the same id as defined in the +appId+ must be inserted somewhere.

Of course also the full power of the Freemarker template engine is available, as documented at: 
http://freemarker.org/docs/dgui.html 

Example template with a simple header and footer added:

----
<!DOCTYPE html>
<html>
  <head>
    <#include "system/header-mandatory.ftl">

    <#include "system/header-std.ftl">
  </head>
 
  <body>
  
    <#assign appId="main-element">
    
    <div style="background-color: blue;">CUSTOM HEADER</div>
    <#include "system/body-main-ui.ftl">
    <div style="background-color: blue;">UNITY ROCKS!</div>
    
    <#include "system/body-mandatory-end.ftl">
    
  </body>
</html>
----

==== Configuration settings   

Modification of the default template influences all UIs of Unity. However, it is possible to use different
templates for every endpoint, what is configured with the +unity.endpoint.web.template+ setting.

There are also options to set templates for the shared (not endpoint specific UIs), as the email confirmation
screen. See the main server reference documentation: <<configuration>>. 


include::branding-v2x.txt[]



[[i18n]]
=== Controlling translation of messages

Unity offers internationalization (i18) features out of the box. However, the list of available languages
is hardcoded and currently includes only English (en), Polish (pl) and German (de) locales. English locale is
the default one and all default messages are in this language. Couple of other translations are mostly complete with the
exception of the Admin Console which is English only. 
Administrator can configure which of the supported languages are enabled 
(see +unityServer.conf+ documentation for up to date list of allowed ones in <<configuration>>).

If you would like to have other locale supported please contact us via the mailing list - there is no problem to add 
them or to allow for admin-configured locales outside from those predefined in distribution. We also use Weblate at 
https://hosted.weblate.org/projects/unity-idm for collecting open source improvements to existing translations.

Actual translations are fully controlled by Unity administrator. 
In the +i18n/+ subfolder of the configuration directory a copy of all system messages is stored. 
It is possible to change any of the messages which are stored there, also including translations.
Files are grouped in several directories; the structure of those directories is hardcoded and can not be modified.
In each directory there is one +message.properties+ file with default values (the default is simply English) and
arbitrary number of files +message_LC.properties+, where +LC+ is a code of a locale of the translation. 

It is important to note how language-wise resolving of messages follows. For each message key and locale, 
Unity searches for the message value in the following order:

1. locale specific file in the configuration directory
2. default locale file in the configuration directory
3. locale specific, packaged translation (can not be modified)
4. default locale, packaged translation (can not be modified)

Note that initially (until any custom reconfigurations are performed) the two last options are the same
as the two first.

NOTE: It is advised not to modify the default messages in place, as during subsequent updates those modifications
may be lost, or, depending on update mode, the updated default messages may be ignored during update. 
Instead a separate directory may be configured for customized translations, while the default i18n directory is used 
for the reference only.   

What is more Unity allows for providing all names, descriptions and other texts which are end-user oriented 
and configurable by administrator in multiple languages. The user interface shows a small flag on
right-top edge of each translatable component. After expanding the component, the translations in all enabled
languages can be provided.

image::./figures/languages.png[alt="Unity allows for translating admin-provided names",align="center"]
