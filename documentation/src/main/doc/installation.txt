[id=installation]
== Installation and operation manual

=== Prerequisites

Unity is tested on the Linux platform. Also other variants of Unix should be fine to run Unity.  

Unity theoretically can be run on Windows server, however we neither provide startup scripts for windows nor
test it. If you would love to run Unity on Windows machine, write to the support mailing list. 

Unity is distributed with everything needed to install and run the system except of Java. 
Java Runtime Environment 8 is a minimal supported version. Unity can be also run on newer version of Java,
up to version 11. Later versions likely will work too. 

[NOTE]
The recent OpenJDK 8 often cause troubles (depending on distribution) as it has sometimes certain 
ciphers disabled and clients (as web browsers) may be unable to find commonly supported, safe ciphers suites
for bootstrapping TLS connection. If your browser is unable to connect to Unity then most probably 
this is the case.

[NOTE]
In case of the Oracle JDK 8, the unlimited strength cryptography policy needs to be 
installed, as otherwise only the low quality key sizes are supported and even the demo certificate 
of Unity is not working.

=== Fresh installation

If the +.tar.gz+ version is used, it must be simply downloaded and unpacked. A directory with Unity version
number is included. Typically the start script should be created or integrated with the startup system of the
machine. The distribution's +extra/+ folder may provide a suitable script. 
It is also a good idea to add the +INSTALLATION_DIRECTORY/bin/+ folder to the +PATH+ environment variable,
so the scripts are instantly available. This is assumed later on in all examples.  

=== Starting and stopping the server

Starting is simple:

----
$> unity-idm-server-start
----

It is always good to check the log files. The +log/unity-startup.log+ should contain only few lines saying that
the server started successfully. If there are any errors there, it means that a very low level problem happened, 
for instance the JRE is not available. The +log/unity-server.log+ should provide a more detailed information, 
which should be also checked. There should be no +ERROR+ and no +WARN+ entries.

Stopping the server is simple as well:

----
$> unity-idm-server-stop
----

=== File vs Console control

Since Unity 3 it is possible to set (almost) all settings at runtime using the web Console (and some with REST Admin API).
Except very basic settings as DB connection and HTTP server settings, the configuration from config files is only loaded
at the first start to populate initial contents of the server. After subsequent restarts all modifications done at runtime are
preserved. This applies to endpoints, authenticators, realms, etc.

If, however, it is preferred to configure Unity with a configuration file, in a way that its settings are overwritting 
the settings made at runtime, it is possible to change the initialization behavior. To do so set 

----
unityServer.core.useConfiguredContentsOnFreshStartOnly=false
----

If this option is set as above Unity will use the same initialization logic as in older version 2.


=== Notes on redundant installations

It is possible to install Unity in a High Availability (HA) setup. 
The Unity HA can be realized _on the database level_ when using MySQL or PostgreSQL database.

When configuring the system some precautions must be made:

. In general only a single instance should be responsible for loading the initial state of the system (endpoints, 
authenticators etc). Otherwise the servers might have problems during startup and it is hard to keep multiple 
configurations the same. It is good to set +unityServer.core.ignoreContentsReloadingFromConfiguration=true+ on the 'slave' nodes.
. All instances should use the same +unityServer.core.httpServer.advertisedHost+ value. At the same time DNS 
entry of the value should be switched when a primary service is detected to be down.

Please note that several runtime features of the system are propagated to other nodes with some latency.
For instance a removal of an endpoint on one instance will be reflected in the shared database immediately, however
other Unity instances will catch up and undeploy the endpoint with some delay.

If the server is being managed (via Admin Console) with two instances simultaneously, the 'Refresh' buttons are more then handy: 
the UI state is not updated automatically.

Finally note about login sessions: login sessions are shared between Unity instances, while HTTP sessions are not.
Therefore if the web browser is logged to one instance's endpoint and then the browser is directed to another the
session should be preserved (assuming that the browser has the same DNS address associated with both instances
as it is suggested above). The same applies to the logout operation.

