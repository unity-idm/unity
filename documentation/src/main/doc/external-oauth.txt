=== Standard OAuth2 (Unity as OAuth Client)

Credential verificator name:: +oauth2+
Compatible credentials:: +OAuth2 tokens+


The typical authenticator's configuration will look as follows:

----
unityServer.core.authenticators.x.authenticatorName=oauthWeb
unityServer.core.authenticators.x.authenticatorType=oauth2
unityServer.core.authenticators.x.configurationFile=conf/authenticators/remoteOAuth.properties
----

Let's consider an example of a configuration of the OAuth2 verificator 
in file +conf/authenticators/remoteOAuth.properties+:

----
unity.oauth2.client.providers.fb.type=facebook
unity.oauth2.client.providers.fb.clientId=UNITY_APP_ID_FROM_FACEBOOK
unity.oauth2.client.providers.fb.clientSecret=UNITY_APP_SECRET_FROM_FACEBOOK

unity.oauth2.client.providers.google.type=google
unity.oauth2.client.providers.google.clientId=UNITY_APP_ID_FROM_GOOGLE
unity.oauth2.client.providers.google.clientSecret=UNITY_APP_SECRET_FROM_GOOGLE
unity.oauth2.client.providers.google.scopes=profile openid email
unity.oauth2.client.providers.google.translationProfile=googleProfile
----

In the above example two providers are configured: Facebook and Google. Facebook is configuraed with default settings
which are most of the time sufficient: you have to select provider's type ad provide OAuth client's id and secret.
In the 2nd example some of the default values are overriden for Google provider. See reference below for a complete list
of fine-tuning options you can use.

NOTE: ORCID identity provider is supported, but its profile returns a super complex user information record. 
Unity doesn't provide an out of the box input translation profile for ORCID yet, one must be always manually created.
For Orcid the attrObj contrrust is very useful to traverse complex JSON data returned in the input profile rules. 

You can select among several providers for which we have a predefined type, or use the +custom+ type, where nearly arbitrary
standards compliant OAuth identity provider can be configured.   

Typically Unity service needs to be registered as a trusted application at the providers service. 
Note that in some cases it may require paid account. During the registration a client identifier and secret
are generated, which need to be configured in Unity (+clientId+ and +clientSecret+). What's more the provider 
typically should require to enter the client's 'callback URL'. For Unity it will be:

  https://YOUR-EXTERNAL-UNITY-ADDRESS/unitygw/oauth2ResponseConsumer
  
Links to client management pages of some of the well known providers:

. Google: https://console.developers.google.com/project
. Microsoft Live: https://account.live.com/developers/applications
. Facebook: https://developers.facebook.com

As with every remote authenticator a 'translation profile' is used to map external data to local representation.
Unity is shipped with default profiles for the supported providers, but you can use your own. Typically custom profile
inherits rules from the base one and enriches or overwrites them with custom settings. 

Finally you can override some of the default settings for the provider. The most useful is the +scopes+ setting:
it controls how much of the information is requested to be fetched from the provider (of course the user must agree 
to provide this level of access). Each provider uses different names for scopes so please check up
providers documentation to learn the available values. 

The complete OAuth options reference follows. First a general table shows what are the options pertaining to 
the whole authenticator, then a separate table shows the options which can be set for each OAuth2 provider.

include::ref-oauthClientProperties.txt[]

include::ref-oauthProviderProperties.txt[]


=== Simple OAuth2 (Unity as OAuth Resource Provider)

Credential verificator name:: +oauth-rp+
Compatible credentials:: +OAuth2 access token+

The standard OAuth authentication is the best choice whenever it is possible to use it. Unfortunately 
there are cases when it is not suitable, e.g. if the authentication of a non web browser 
based user/client shall be performed.

Unity can authenticate its clients by consuming an OAuth2 access token, more precisely the bearer access token
as defined by the http://tools.ietf.org/html/rfc6750. The access token can be issued by a remote OAuth Authorization
Server or by the local Unity instance. 

As a remote access token validation is not defined in OAuth protocol and there is no well established standard 
currently, the verification method depends on the OAuth AS implementation. If you want to use another 
OAuth AS which is unsupported let us know.

The validation work as follows:

. The access token is validated using a remote service. Usually this means: one HTTP GET to a token validation
endpoint of a remote AS.
. If the token is valid then another query to a profile endpoint at the OAuth AS is performed,
to obtain information about the user initiated token generation. 

Of course, Unity supports caching the verification results.

[IMPORTANT]
The current implementation authenticates the client in somewhat simplistic way: as the
user who issued the access token. This approach called 'impersonation' is not the best one as we loose
the ability to distinguish the identity of the actual Unity client who is providing the access token.
Therefore the current implementation of the OAuth RP authenticator will be modified in future to fully 
support a 'delegation' approach, instead of impersonation.
 

The typical authenticator's configuration looks as follows:

----
unityServer.core.authenticators.x.authenticatorName=oauthRP-Rest
unityServer.core.authenticators.x.authenticatorType=oauth-rp
unityServer.core.authenticators.x.configurationFile=conf/authenticators/remoteOAuth-RP.properties
----

An example configuration of the OAuth2 RP verificator 
in file +conf/authenticators/remoteOAuth-RP.properties+ follows:

----
unity.oauth2-rp.verificationProtocol=mitre
unity.oauth2-rp.profileEndpoint=https://mitreid.org/userinfo
unity.oauth2-rp.verificationEndpoint=https://mitreid.org/introspect
unity.oauth2-rp.cacheTime=20
unity.oauth2-rp.clientId=unity
unity.oauth2-rp.clientSecret=unity-pass
unity.oauth2-rp.translationProfile=tr-oauth
----

In this example the demo MITRE service is configured. The first three lines are the most important: 
the verification protocol is chosen and the validation and user profile endpoints are defined. 
The +clientId+ and +clientSecret+ are obtained 
at registration time (note that in this case there is bit of ambiguity in naming: the client mentioned her 
in OAuth terminology is not is 'OAuth Resource Provider' not the 'OAuth client'). Finally a translation profile
is set to process the user's information and to map it to a local representation. 

The following table lists all currently implemented validation protocols:

[cols="m,n", options="header"]
|====
|Validation protocol| Description 
|internal			| Validates a token using the internal Unity's database of tokens issued by its own OAuth AS endpoint. This method doesn't require any endpoints to be defined. 
|unity				| Validates a token using an external Unity OAuth AS endpoint. 
|mitre				| Validates a token using an external MITRE OAuth Authorization Server.
|==== 


A full reference of configuration parameters: 

include::ref-oauthRPProperties.txt[]
