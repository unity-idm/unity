/*
 * Copyright (c) 2013 ICM Uniwersytet Warszawski All rights reserved.
 * See LICENCE.txt file for licensing information.
 */
package io.imunity.console.views.authentication.input_profiles.wizard;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.grid.GridVariant;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.splitlayout.SplitLayout;

import io.imunity.console.tprofile.DragDropBean;
import io.imunity.console.tprofile.TranslationProfileEditor;
import pl.edu.icm.unity.base.message.MessageSource;
import pl.edu.icm.unity.engine.api.authn.remote.RemotelyAuthenticatedInput;
import pl.edu.icm.unity.engine.api.translation.in.InputTranslationContextFactory;

/**
 * UI Component used by {@link ProfileStep}.
 * 
 * @author P.Piernik
 */
class ProfileStepComponent extends HorizontalLayout
{
	private final MessageSource msg;
	private final TranslationProfileEditor editor;
	
	private SplitLayout splitPanelLayout;
	private VerticalLayout leftPanel;
	private Grid<DragDropBean> attributesTable;
	private Span dragdropHint;
	private VerticalLayout rightPanel;

	/**
	 * The constructor should first build the main layout, set the composition root
	 * and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual editor.
	 */
	ProfileStepComponent(MessageSource msg, TranslationProfileEditor editor)
	{
		this.msg = msg;
		this.editor = editor;

		buildMainLayout();

		rightPanel.removeAll();
		rightPanel.add(editor);

		dragdropHint.getElement()
				.setProperty("innerHTML", msg.getMessage("Wizard.ProfileStepComponent.dragdropHint"));
	}

	public void handle(RemotelyAuthenticatedInput authnInput)
	{
		initializeAttributesTable(authnInput);
		editor.setRemoteAuthnInput(authnInput);
	}

	private void initializeAttributesTable(RemotelyAuthenticatedInput input)
	{
		Collection<DragDropBean> values = getTableContent(input);
		attributesTable.setItems(values);
		attributesTable.setRowsDraggable(true);
	}
	
	private Collection<DragDropBean> getTableContent(RemotelyAuthenticatedInput input)
	{
		Collection<DragDropBean> items = new ArrayList<>();
		Map<String, String> exprValMap = InputTranslationContextFactory.createExpresionValueMap(input);

		for (Map.Entry<String, String> exprE : exprValMap.entrySet())
		{
			items.add(new DragDropBean(exprE.getKey(), exprE.getValue()));
		}

		return items;
	}

	private void buildMainLayout()
	{

		setWidthFull();
		splitPanelLayout = buildSplitPanelLayout();
		add(splitPanelLayout);
	}

	private SplitLayout buildSplitPanelLayout()
	{
		// common part: create layout
		splitPanelLayout = new SplitLayout();
		splitPanelLayout.setSizeFull();

		// rightPanel
		rightPanel = new VerticalLayout();
		rightPanel.setSpacing(false);
		rightPanel.setSizeFull();

		splitPanelLayout.addToPrimary(rightPanel);

		// leftPanel
		leftPanel = buildLeftPanel();
		splitPanelLayout.addToSecondary(leftPanel);

		return splitPanelLayout;
	}

	private VerticalLayout buildLeftPanel()
	{
		// common part: create layout
		leftPanel = new VerticalLayout();
		leftPanel.setSpacing(false);
		leftPanel.setSizeFull();

		// dragdropHint
		dragdropHint = new Span();
		leftPanel.add(dragdropHint);

		// attributesTable
		attributesTable = new Grid<>();
		attributesTable.addThemeVariants(GridVariant.LUMO_COMPACT);
		attributesTable.addColumn(DragDropBean::getExpression)
				.setHeader(msg.getMessage("Wizard.ProfileStepComponent.expression"));
		attributesTable.addColumn(DragDropBean::getValue)
				.setHeader(msg.getMessage("Wizard.ProfileStepComponent.value"));
		attributesTable.setWidthFull();
		leftPanel.add(attributesTable);

		return leftPanel;
	}
}
