{
  "$schema": "https://json.schemastore.org/web-types",
  "name": "@vaadin/grid-pro",
  "version": "23.2.0",
  "description-markup": "markdown",
  "framework": "lit",
  "framework-config": {
    "enable-when": {
      "node-packages": [
        "lit"
      ]
    }
  },
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "vaadin-grid-pro-edit-column",
          "description": "`<vaadin-grid-pro-edit-column>` is a helper element for the `<vaadin-grid-pro>`\nthat provides default inline editing for the items.\n\n__Note that the `path` property must be explicitly specified for edit column.__\n\n#### Example:\n```html\n<vaadin-grid-pro items=\"[[items]]\">\n <vaadin-grid-pro-edit-column path=\"name.first\"></vaadin-grid-pro-edit-column>\n\n <vaadin-grid-column>\n   ...\n```",
          "extension": true,
          "attributes": [
            {
              "name": "?resizable",
              "description": "When set to true, the column is user-resizable.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "?frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "?frozenToEnd",
              "description": "When true, the column is frozen to end of grid.\n\nWhen a column inside of a column group is frozen to end, all of the sibling columns\ninside the group will get frozen to end also.\n\nColumn can not be set as `frozen` and `frozenToEnd` at the same time.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "?hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "?autoWidth",
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `flexGrow` is not 0.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".header",
              "description": "Text content to display in the header cell of the column.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".textAlign",
              "description": "Aligns the columns cell content horizontally.\nSupported values: \"start\", \"center\" and \"end\".",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".headerRenderer",
              "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".footerRenderer",
              "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".width",
              "description": "Width of the cells for this column.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".flexGrow",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".renderer",
              "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".path",
              "description": "JS Path of the property in the item used for the editable content.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".editModeRenderer",
              "description": "Custom function for rendering the cell content in edit mode.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your editor component to it.\n- `column` The `<vaadin-grid-pro-edit-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".editorOptions",
              "description": "The list of options which should be passed to cell editor component.\nUsed with the `select` editor type, to provide a list of items.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".editorType",
              "description": "Type of the cell editor component to be rendered. Allowed values:\n- `text` (default) - renders a text field\n- `checkbox` - renders a checkbox\n- `select` - renders a select with a list of items passed as `editorOptions`\n\nEditor type is set to `custom` when `editModeRenderer` is set.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".editorValuePath",
              "description": "Path of the property used for the value of the editor component.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@editor-type-changed",
              "description": "Fired when the `editorType` property changes.",
              "value": {
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "vaadin-grid-pro",
          "description": "`<vaadin-grid-pro>` is a high quality data grid / data table Web Component with extended functionality.\nIt extends `<vaadin-grid>` and adds extra features on top of the basic ones.\n\nSee [`<vaadin-grid>`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-grid) documentation for details.\n\n```\n<vaadin-grid-pro></vaadin-grid-pro>\n```\n\n### Internal components\n\nIn addition to `<vaadin-grid-pro>` itself, the following internal\ncomponents are themable:\n\n- `<vaadin-grid-pro-edit-checkbox>` - has the same API as [`<vaadin-checkbox>`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-checkbox).\n- `<vaadin-grid-pro-edit-text-field>` - has the same API as [`<vaadin-text-field>`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-text-field).\n- `<vaadin-grid-pro-edit-select>` - has the same API as [`<vaadin-select>`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-select).",
          "extension": true,
          "attributes": [
            {
              "name": "?multiSort",
              "description": "When `true`, all `<vaadin-grid-sorter>` are applied for sorting.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "?columnReorderingAllowed",
              "description": "Set to true to allow column reordering.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "?rowsDraggable",
              "description": "Marks the grid's rows to be available for dragging.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "?allRowsVisible",
              "description": "If true, the grid's height is defined by its rows.\n\nEffectively, this disables the grid's virtual scrolling so that all the rows are rendered in the DOM at once.\nIf the grid has a large number of items, using the feature is discouraged to avoid performance issues.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "?enterNextRow",
              "description": "When true, pressing Enter while in cell edit mode\nwill move focus to the editable cell in the next row\n(Shift + Enter - same, but for previous row).",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "?singleCellEdit",
              "description": "When true, after moving to next or previous editable cell using\nTab / Shift+Tab, it will be focused without edit mode.\n\nWhen `enterNextRow` is true, pressing Enter will also\npreserve edit mode, otherwise, it will have no effect.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "?editOnClick",
              "description": "When true, the grid enters cell edit mode on a single click\ninstead of the default double click.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".activeItem",
              "description": "The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".items",
              "description": "An array containing the items which will be passed to renderer functions.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".size",
              "description": "The number of root-level items in the grid.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".pageSize",
              "description": "Number of items fetched at a time from the dataprovider.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".dataProvider",
              "description": "Function that provides items lazily. Receives arguments `params`, `callback`\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filters` Currently applied filters\n\n`params.sortOrders` Currently applied sorting orders\n\n`params.parentItem` When tree is used, and sublevel items\nare requested, reference to parent item of the requested sublevel.\nOtherwise `undefined`.\n\n`callback(items, size)` Callback function with arguments:\n  - `items` Current page of items\n  - `size` Total number of items. When tree sublevel items\n    are requested, total number of items in the requested sublevel.\n    Optional when tree is not used, required for tree.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".itemHasChildrenPath",
              "description": "Path to an item sub-property that indicates whether the item has child items.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".itemIdPath",
              "description": "Path to an item sub-property that identifies the item.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".expandedItems",
              "description": "An array that contains the expanded items.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".detailsOpenedItems",
              "description": "An array containing references to items with open row details.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".rowDetailsRenderer",
              "description": "Custom function for rendering the content of the row details.\nReceives three arguments:\n\n- `root` The row details content DOM element. Append your content to it.\n- `grid` The `<vaadin-grid>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.level` The number of the item's tree sublevel, starts from 0.\n  - `model.expanded` True if the item's tree sublevel is expanded.\n  - `model.selected` True if the item is selected.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".selectedItems",
              "description": "An array that contains the selected items.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".multiSortPriority",
              "description": "Controls how columns are added to the sort order when using multi-sort.\nThe sort order is visually indicated by numbers in grid sorters placed in column headers.\n\nBy default, whenever an unsorted column is sorted, or the sort-direction of a column is\nchanged, that column gets sort priority 1, thus affecting the priority for all the other\nsorted columns. This is identical to using `multi-sort-priority=\"prepend\"`.\n\nUsing this property allows to change this behavior so that sorting an unsorted column\nwould add it to the \"end\" of the sort, and changing column's sort direction would retain\nit's previous priority. To set this, use `multi-sort-priority=\"append\"`.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".cellClassNameGenerator",
              "description": "A function that allows generating CSS class names for grid cells\nbased on their row and column. The return value should be the generated\nclass name as a string, or multiple class names separated by whitespace\ncharacters.\n\nReceives two arguments:\n- `column` The `<vaadin-grid-column>` element (`undefined` for details-cell).\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".dropMode",
              "description": "Defines the locations within the Grid row where an element can be dropped.\n\nPossible values are:\n- `between`: The drop event can happen between Grid rows.\n- `on-top`: The drop event can happen on top of Grid rows.\n- `on-top-or-between`: The drop event can happen either on top of or between Grid rows.\n- `on-grid`: The drop event will not happen on any specific row, it will show the drop target outline around the whole grid.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".dragFilter",
              "description": "A function that filters dragging of specific grid rows. The return value should be false\nif dragging of the row should be disabled.\n\nReceives one argument:\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": ".dropFilter",
              "description": "A function that filters dropping on specific grid rows. The return value should be false\nif dropping on the row should be disabled.\n\nReceives one argument:\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@active-item-changed",
              "description": "Fired when the `activeItem` property changes.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@cell-activate",
              "description": "Fired when the cell is activated with click or keyboard.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@column-resize",
              "description": "Fired when a column in the grid is resized by the user.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@expanded-items-changed",
              "description": "Fired when the `expandedItems` property changes.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@loading-changed",
              "description": "Fired when the `loading` property changes.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@selected-items-changed",
              "description": "Fired when the `selectedItems` property changes.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@cell-focus",
              "description": "Fired when a cell is focused with click or keyboard navigation.\n\nUse context property of @see {@link GridCellFocusEvent} to get detail information about the event.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@column-reorder",
              "description": "Fired when the columns in the grid are reordered.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@grid-dragend",
              "description": "Fired when the dragging of the rows ends.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@grid-dragstart",
              "description": "Fired when starting to drag grid rows.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@grid-drop",
              "description": "Fired when a drop occurs on top of the grid.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@cell-edit-started",
              "description": "Fired when the user starts editing a grid cell.",
              "value": {
                "kind": "expression"
              }
            },
            {
              "name": "@item-property-changed",
              "description": "Fired before exiting the cell edit mode, if the value has been changed.\nIf the default is prevented, value change would not be applied.",
              "value": {
                "kind": "expression"
              }
            }
          ]
        }
      ]
    }
  }
}