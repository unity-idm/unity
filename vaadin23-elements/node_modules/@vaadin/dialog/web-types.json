{
  "$schema": "https://json.schemastore.org/web-types",
  "name": "@vaadin/dialog",
  "version": "23.2.0",
  "description-markup": "markdown",
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "vaadin-dialog",
          "description": "`<vaadin-dialog>` is a Web Component for creating customized modal dialogs.\n\n### Rendering\n\nThe content of the dialog can be populated by using the renderer callback function.\n\nThe renderer function provides `root`, `dialog` arguments.\nGenerate DOM content, append it to the `root` element and control the state\nof the host element by accessing `dialog`. Before generating new content,\nusers are able to check if there is already content in `root` for reusing it.\n\n```html\n<vaadin-dialog id=\"dialog\"></vaadin-dialog>\n```\n```js\nconst dialog = document.querySelector('#dialog');\ndialog.renderer = function(root, dialog) {\n  root.textContent = \"Sample dialog\";\n};\n```\n\nRenderer is called on the opening of the dialog.\nDOM generated during the renderer call can be reused\nin the next renderer call and will be provided with the `root` argument.\nOn first call it will be empty.\n\n### Styling\n\n`<vaadin-dialog>` uses `<vaadin-dialog-overlay>` internal\nthemable component as the actual visible dialog overlay.\n\nSee [`<vaadin-overlay>`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-overlay) documentation.\nfor `<vaadin-dialog-overlay>` parts.\n\nIn addition to `<vaadin-overlay>` parts, the following parts are available for styling:\n\nPart name        | Description\n-----------------|-------------------------------------------\n`header`         | Element wrapping title and header content\n`header-content` | Element wrapping the header content slot\n`title`          | Element wrapping the title slot\n`footer`         | Element wrapping the footer slot\n\nThe following state attributes are available for styling:\n\nAttribute        | Description\n-----------------|--------------------------------------------\n`has-title`      | Set when the element has a title\n`has-header`     | Set when the element has header renderer\n`has-footer`     | Set when the element has footer renderer\n`overflow`       | Set to `top`, `bottom`, none or both\n\nNote: the `theme` attribute value set on `<vaadin-dialog>` is\npropagated to the internal `<vaadin-dialog-overlay>` component.\n\nSee [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.",
          "attributes": [
            {
              "name": "draggable",
              "description": "Set to true to enable repositioning the dialog by clicking and dragging.\n\nBy default, only the overlay area can be used to drag the element. But,\na child element can be marked as a draggable area by adding a\n\"`draggable`\" class to it, this will by default make all of its children draggable also.\nIf you want a child element to be draggable\nbut still have its children non-draggable (by default), mark it with\n\"`draggable-leaf-only`\" class name.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "resizable",
              "description": "Set to true to enable resizing the dialog by dragging the corners and edges.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "opened",
              "description": "True if the overlay is currently displayed.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "no-close-on-outside-click",
              "description": "Set to true to disable closing dialog on outside click",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "no-close-on-esc",
              "description": "Set to true to disable closing dialog on Escape press",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "aria-label",
              "description": "Set the `aria-label` attribute for assistive technologies like\nscreen readers. An empty string value for this property (the\ndefault) means that the `aria-label` attribute is not present.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "header-title",
              "description": "String used for rendering a dialog title.\n\nIf both `headerTitle` and `headerRenderer` are defined, the title\nand the elements created by the renderer will be placed next to\neach other, with the title coming first.\n\nWhen `headerTitle` is set, the attribute `has-title` is added to the overlay element.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "modeless",
              "description": "Set to true to remove backdrop and allow click events on background elements.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "draggable",
                "description": "Set to true to enable repositioning the dialog by clicking and dragging.\n\nBy default, only the overlay area can be used to drag the element. But,\na child element can be marked as a draggable area by adding a\n\"`draggable`\" class to it, this will by default make all of its children draggable also.\nIf you want a child element to be draggable\nbut still have its children non-draggable (by default), mark it with\n\"`draggable-leaf-only`\" class name.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "resizable",
                "description": "Set to true to enable resizing the dialog by dragging the corners and edges.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "opened",
                "description": "True if the overlay is currently displayed.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "noCloseOnOutsideClick",
                "description": "Set to true to disable closing dialog on outside click",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "noCloseOnEsc",
                "description": "Set to true to disable closing dialog on Escape press",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "ariaLabel",
                "description": "Set the `aria-label` attribute for assistive technologies like\nscreen readers. An empty string value for this property (the\ndefault) means that the `aria-label` attribute is not present.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "renderer",
                "description": "Custom function for rendering the content of the dialog.\nReceives two arguments:\n\n- `root` The root container DOM element. Append your content to it.\n- `dialog` The reference to the `<vaadin-dialog>` element.",
                "value": {
                  "type": [
                    "DialogRenderer",
                    "undefined"
                  ]
                }
              },
              {
                "name": "headerTitle",
                "description": "String used for rendering a dialog title.\n\nIf both `headerTitle` and `headerRenderer` are defined, the title\nand the elements created by the renderer will be placed next to\neach other, with the title coming first.\n\nWhen `headerTitle` is set, the attribute `has-title` is added to the overlay element.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "headerRenderer",
                "description": "Custom function for rendering the dialog header.\nReceives two arguments:\n\n- `root` The root container DOM element. Append your content to it.\n- `dialog` The reference to the `<vaadin-dialog>` element.\n\nIf both `headerTitle` and `headerRenderer` are defined, the title\nand the elements created by the renderer will be placed next to\neach other, with the title coming first.\n\nWhen `headerRenderer` is set, the attribute `has-header` is added to the overlay element.",
                "value": {
                  "type": [
                    "DialogRenderer",
                    "undefined"
                  ]
                }
              },
              {
                "name": "footerRenderer",
                "description": "Custom function for rendering the dialog footer.\nReceives two arguments:\n\n- `root` The root container DOM element. Append your content to it.\n- `dialog` The reference to the `<vaadin-dialog>` element.\n\nWhen `footerRenderer` is set, the attribute `has-footer` is added to the overlay element.",
                "value": {
                  "type": [
                    "DialogRenderer",
                    "undefined"
                  ]
                }
              },
              {
                "name": "modeless",
                "description": "Set to true to remove backdrop and allow click events on background elements.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              }
            ],
            "events": [
              {
                "name": "opened-changed",
                "description": "Fired when the `opened` property changes."
              }
            ]
          }
        }
      ]
    }
  }
}