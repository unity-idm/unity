{
  "$schema": "https://json.schemastore.org/web-types",
  "name": "@vaadin/charts",
  "version": "23.2.0",
  "description-markup": "markdown",
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "vaadin-chart-series",
          "description": "`<vaadin-chart-series>` is a custom element for creating series for Vaadin Charts.\n\n### Basic use\n\nTo use `<vaadin-chart-series>`, add it inside a `<vaadin-chart>` element:\n\n```html\n <vaadin-chart>\n   <vaadin-chart-series></vaadin-chart-series>\n </vaadin-chart>\n```\n\n`<vaadin-chart-series>` accepts `values` as an array attribute, so you can add it to your element definition:\n\n```html\n <vaadin-chart-series values=\"[10,20,30,40,50]\"></vaadin-chart-series>\n```\n\nwhich will add a new line series, where each value will be a data point.\nLook for the Properties session to see all available attributes.\n\n### Dynamically adding and removing series\n\nYou are also able to add and remove series by using DOM API.\n\nTo create a new series, call `document.createElement('vaadin-chart-series')` and append it to your `<vaadin-chart>`:\n\n```js\n const chart = \\* a <vaadin-chart> reference *\\\n const newSeries = document.createElement('vaadin-chart-series');\n newSeries.values = [10,20,30,40,50];\n chart.appendChild(newSeries);\n```\n\nIn order to remove it, you should use the series to be removed as a reference for the `#removeChild()` call:\n\n```js\n const chart = \\* a <vaadin-chart> reference *\\\n const seriesToBeRemoved = \\* a <vaadin-chart-series> reference to remove*\\\n chart.removeChild(seriesToBeRemoved);\n```",
          "attributes": [
            {
              "name": "value-min",
              "description": "Value-axis minimum-value.\nSets the value to a series bound by 'unit' property.\nOtherwise sets the value to the first series.\nUndefined by default (determined from data).",
              "value": {
                "type": [
                  "number",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "value-max",
              "description": "Value-axis maximum-value.\nSee the 'valueMin'",
              "value": {
                "type": [
                  "number",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "type",
              "description": "A string with the type of the series.\nDefaults to `'line'` in case no type is set for the chart.\nNote that `'bar'`, `'gauge'` and `'solidgauge'` should be set as default series type on `<vaadin-chart>`.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "title",
              "description": "The name of the series as shown in the legend, tooltip etc.",
              "value": {
                "type": [
                  "string"
                ]
              }
            },
            {
              "name": "markers",
              "description": "Shows/hides data-point markers for line-like series.\nAcceptable input are:\n - `shown`: markers are always visible\n - `hidden`: markers are always hidden\n - `auto`: markers are visible for widespread data and hidden, when data is dense *(default)*",
              "value": {
                "type": [
                  "ChartSeriesMarkers",
                  "undefined"
                ]
              }
            },
            {
              "name": "unit",
              "description": "Used to connect the series to an axis; if multiple series have the same “unit”, they will share axis.\nDisplayed as a title for the axis.\nIf no unit is defined, then series will be connected to the first axis.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "stack",
              "description": "Used to group series in a different stacks.\n\"stacking\" property should be specified either for each series or in plotOptions.\nIt is recommended to place series in a single stack, when they belong to the same yAxis.",
              "value": {
                "type": [
                  "number",
                  "string"
                ]
              }
            },
            {
              "name": "neck-position",
              "description": "The height of the neck, the lower part of the funnel.\nA number defines pixel width, a percentage string defines a percentage of the plot area height. Defaults to 30%.\nNote that this property only applies for \"funnel\" charts.",
              "value": {
                "type": [
                  "number",
                  "string"
                ]
              }
            },
            {
              "name": "neck-width",
              "description": "The width of the neck, the lower part of the funnel.\nA number defines pixel width, a percentage string defines a percentage of the plot area width. Defaults to 30%.\nNote that this property only applies for \"funnel\" charts.",
              "value": {
                "type": [
                  "number",
                  "string"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "values",
                "description": "An array of data used by the series.\nFormat depends on the chart type and can be:\n  - An array of numerical values `[y0, y1, y2, y3,...]`\n  - An array of arrays with 2 values (`x`, `y`) `[ [x0, y0], [x1, y1], [x2, y2], ... ]`\n  - An array of objects, each one describing one point `[ {x: x0, y: y0, name: 'Point0', color: '#FF0000'}, {...}, ...]`\n\n See more in [API Site](https://api.highcharts.com/highcharts/series)\n\nNote that you should always use [Polymer API](https://www.polymer-project.org/2.0/docs/devguide/model-data#array-mutation)\nto mutate the values array in order to make the component aware of the\nchange and be able to synchronize it.",
                "value": {
                  "type": [
                    "ChartSeriesValues"
                  ]
                }
              },
              {
                "name": "valueMin",
                "description": "Value-axis minimum-value.\nSets the value to a series bound by 'unit' property.\nOtherwise sets the value to the first series.\nUndefined by default (determined from data).",
                "value": {
                  "type": [
                    "number",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "valueMax",
                "description": "Value-axis maximum-value.\nSee the 'valueMin'",
                "value": {
                  "type": [
                    "number",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "type",
                "description": "A string with the type of the series.\nDefaults to `'line'` in case no type is set for the chart.\nNote that `'bar'`, `'gauge'` and `'solidgauge'` should be set as default series type on `<vaadin-chart>`.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "title",
                "description": "The name of the series as shown in the legend, tooltip etc.",
                "value": {
                  "type": [
                    "string"
                  ]
                }
              },
              {
                "name": "markers",
                "description": "Shows/hides data-point markers for line-like series.\nAcceptable input are:\n - `shown`: markers are always visible\n - `hidden`: markers are always hidden\n - `auto`: markers are visible for widespread data and hidden, when data is dense *(default)*",
                "value": {
                  "type": [
                    "ChartSeriesMarkers",
                    "undefined"
                  ]
                }
              },
              {
                "name": "unit",
                "description": "Used to connect the series to an axis; if multiple series have the same “unit”, they will share axis.\nDisplayed as a title for the axis.\nIf no unit is defined, then series will be connected to the first axis.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "stack",
                "description": "Used to group series in a different stacks.\n\"stacking\" property should be specified either for each series or in plotOptions.\nIt is recommended to place series in a single stack, when they belong to the same yAxis.",
                "value": {
                  "type": [
                    "number",
                    "string"
                  ]
                }
              },
              {
                "name": "neckPosition",
                "description": "The height of the neck, the lower part of the funnel.\nA number defines pixel width, a percentage string defines a percentage of the plot area height. Defaults to 30%.\nNote that this property only applies for \"funnel\" charts.",
                "value": {
                  "type": [
                    "number",
                    "string"
                  ]
                }
              },
              {
                "name": "neckWidth",
                "description": "The width of the neck, the lower part of the funnel.\nA number defines pixel width, a percentage string defines a percentage of the plot area width. Defaults to 30%.\nNote that this property only applies for \"funnel\" charts.",
                "value": {
                  "type": [
                    "number",
                    "string"
                  ]
                }
              },
              {
                "name": "additionalOptions",
                "description": "Represents additional JSON configuration.",
                "value": {
                  "type": [
                    "SeriesOptionsType",
                    "undefined"
                  ]
                }
              }
            ],
            "events": []
          }
        },
        {
          "name": "vaadin-chart",
          "description": "`<vaadin-chart>` is a Web Component for creating high quality charts.\n\n### Basic use\n\nThere are two ways of configuring your `<vaadin-chart>` element: **HTML API**, **JS API** and **JSON API**.\nNote that you can make use of all APIs in your element.\n\n#### Configuring your chart using HTML API\n\n`vaadin-chart` has a set of attributes to make it easier for you to customize your chart.\n\n```html\n <vaadin-chart title=\"The chart title\" subtitle=\"The chart subtitle\">\n   <vaadin-chart-series\n         type=\"column\"\n         title=\"The series title\"\n         values=\"[10,20,30]\">\n   </vaadin-chart-series>\n </vaadin-chart>\n```\n\n> Note that while you can set type for each series individually, for some types, such as `'bar'`, `'gauge'` and `'solidgauge'`, you\n> have to set it as the default series type on `<vaadin-chart>` in order to work properly.\n\n#### Configuring your chart using JS API\n\n1. Set an id for the `<vaadin-chart>` in the template\n```html\n    <vaadin-chart id=\"mychart\"></vaadin-chart>\n```\n1. Add a function that uses `configuration` property (JS Api) to set chart title, categories and data\n```js\ninitChartWithJSApi() {\n    requestAnimationFrame(() => {\n       const configuration = this.$.mychart.configuration;\n       configuration.setTitle({ text: 'The chart title' });\n       // By default there is one X axis, it is referenced by configuration.xAxis[0].\n       configuration.xAxis[0].setCategories(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);\n       configuration.addSeries({\n           type: 'column',\n           data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]\n       });\n    });\n}\n```\n1. Call that function from connectedCallback (when the element is added to a document)\n```js\nconnectedCallback() {\n    super.connectedCallback();\n    this.initChartWithJSApi();\n}\n```\n\n#### Configuring your chart using JS JSON API\n\nJS JSON API is a simple alternative to the JS API.\n\n1. Set an id for the `<vaadin-chart>` in the template\n```html\n    <vaadin-chart id=\"mychart\"></vaadin-chart>\n```\n1. Add a function that uses `updateConfiguration` method (JS JSON Api) to set chart title, categories and data\n```js\ninitChartWithJSJSONApi() {\n    this.$.mychart.updateConfiguration({\n      title: {\n        text: 'The chart title'\n      },\n      subtitle: {\n        text: 'Subtitle'\n      },\n      xAxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n      },\n      series: [{\n        type: 'column',\n        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]\n      }]\n    });\n}\n```\n1. Call that function from connectedCallback (when the element is added to a document)\n```js\nconnectedCallback() {\n    super.connectedCallback();\n    this.initChartWithJSJSONApi();\n}\n```\n\nIt should be noted that chart style customization cannot be done via the JS or JSON API.\nStyling properties in the JSON configuration will be ignored. The following section discusses chart styling.\n\n### CSS Styling\n\nChart appearance is primarily controlled by CSS style rules.\nA comprehensive list of the supported style classes can be found at\nhttps://www.highcharts.com/docs/chart-design-and-style/style-by-css\n\nSee also the [Chart Styling](https://vaadin.com/docs/latest/components/charts/css-styling) documentation.\n\n### RTL support\n\n`vaadin-charts` as well as [Highcharts](https://www.highcharts.com/) by itself are not adjusting the layout\nbased on the `dir` attribute. In order to make `vaadin-charts` display RTL content properly additional\nJSON configuration should be used.\nEach chart should be updated based on the specific needs, but general recommendations are:\n\n 1. Set `reversed` to true for xAxis (https://api.highcharts.com/highcharts/xAxis.reversed).\n 2. Set `useHTML` to true for text elements, i.e. `tooltip` (https://api.highcharts.com/highcharts/tooltip.useHTML).\n 3. Set `rtl` to true for `legend` (https://api.highcharts.com/highcharts/legend.rtl).\n\nUsing as a base the project created with in Quick Start and an `additionalOptions` in order to make RTL adjustments:\n\n```html\n <vaadin-chart title=\"۱- عنوان نمودار\" subtitle=\"۲- عنوان فرعی نمودار\"\n   additional-options='{\"title\": {\"useHTML\": true}, \"tooltip\": {\"useHTML\": true}, \"subtitle\": {\"useHTML\": true},\n   \"legend\": {\"rtl\": true}, \"yAxis\": [{\"id\": \"۴- مقادیر\", \"title\": {\"text\": \"۴- مقادیر\", \"useHTML\": true}}],\n   \"xAxis\": {\"reversed\": true}}'>\n   <vaadin-chart-series\n         type= \"column\"\n         title=\"۳- عنوان ردیف\"\n         unit=\"۴- مقادیر\"\n         values=\"[10,20,30]\">\n   </vaadin-chart-series>\n </vaadin-chart>\n```\n\n### Setting colors\n\nAlthough charts can be styled as described above, there is a simpler way for setting colors.\nColors can be set using CSS custom properties `--vaadin-charts-color-{n}` (where `n` goes from `0 - 9`).\n\nFor example `--vaadin-charts-color-0` sets the color of the first series on a chart.\n\n### Validating your License\n\nWhen using Vaadin Charts in a development environment, you will see a pop-up that asks you\nto validate your license by signing in to vaadin.com.",
          "attributes": [
            {
              "name": "category-max",
              "description": "Category-axis maximum value. Defaults to `undefined`.",
              "value": {
                "type": [
                  "number",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "category-min",
              "description": "Category-axis minimum value. Defaults to `undefined`.",
              "value": {
                "type": [
                  "number",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "category-position",
              "description": "The position of the category axis. Acceptable values are `left`, `right`, `top` and `bottom`\nexcept for bar charts which only accept `left` and `right`.\nWith the default value, charts appear as though they have `category-position=\"bottom\"`\nexcept for bar charts that appear as though they have `category-position=\"left\"`.\n\nDefaults to `undefined`",
              "value": {
                "type": [
                  "ChartCategoryPosition",
                  "undefined"
                ]
              }
            },
            {
              "name": "no-legend",
              "description": "Specifies whether to hide legend or show.\nLegend configuration can be set up via additionalOptions property",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "stacking",
              "description": "Specifies how series are stacked on top of each other.\nPossible values are null, \"normal\" or \"percent\".\nIf \"stack\" property is not defined on the vaadin-chart-series elements, then series will be put into\nthe default stack.",
              "value": {
                "type": [
                  "ChartStacking",
                  "undefined"
                ]
              }
            },
            {
              "name": "timeline",
              "description": "Specifies whether the chart is a normal chart or a timeline chart.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "title",
              "description": "Represents the title of the chart.",
              "value": {
                "type": [
                  "string"
                ]
              }
            },
            {
              "name": "tooltip",
              "description": "Whether or not to show tooltip when hovering data points.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "type",
              "description": "Sets the default series type of the chart.\nNote that `'bar'`, `'gauge'` and `'solidgauge'` should be set as default series type.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "subtitle",
              "description": "Represents the subtitle of the chart.",
              "value": {
                "type": [
                  "string",
                  "undefined"
                ]
              }
            },
            {
              "name": "chart3d",
              "description": "Specifies whether to show chart in 3 or in 2 dimensions.\nSome display angles are added by default to the \"chart.options3d\" (`{alpha: 15, beta: 15, depth: 50}`).\n3D display options can be modified via `additionalOptions`.\nThe thickness of a Pie chart can be set on `additionalOptions` through `plotOptions.pie.depth`.\n3D is supported by Bar, Column, Pie and Scatter3D charts.\nMore info available at [Highcharts](https://www.highcharts.com/docs/chart-concepts/3d-charts).",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "empty-text",
              "description": "Specifies the message displayed on a chart without displayable data.",
              "value": {
                "type": [
                  "string"
                ]
              }
            },
            {
              "name": "polar",
              "description": "When present, cartesian charts like line, spline, area and column are transformed\ninto the polar coordinate system.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "configuration",
                "description": "Configuration object that exposes the JS Api to configure the chart.\n\nMost important methods are:\n- `addSeries (Object options, [Boolean redraw], [Mixed animation])`\n- `addAxis (Object options, [Boolean isX], [Boolean redraw], [Mixed animation])`\n- `setTitle (Object title, object subtitle, Boolean redraw)`\n\nMost important properties are:\n- `configuration.series`: An array of the chart's series. Detailed API for Series object is\n    available in [API Site](http://api.highcharts.com/class-reference/Highcharts.Series)\n- `configuration.xAxis`: An array of the chart's x axes. Detailed API for Axis object is\n    available in [API Site](http://api.highcharts.com/class-reference/Highcharts.Axis)\n- `configuration.yAxis`: An array of the chart's y axes. Detailed API for Axis object is\n    available in [API Site](http://api.highcharts.com/class-reference/Highcharts.Axis)\n- `configuration.title`: The chart title.\n\nFor detailed documentation of available API check the [API site](http://api.highcharts.com/class-reference/classes.list)",
                "value": {
                  "type": [
                    "Highcharts.Chart",
                    "undefined"
                  ]
                }
              },
              {
                "name": "categories",
                "description": "If categories are present names are used instead of numbers for the category axis.\nThe format of categories can be an `Array` with a list of categories, such as `['2010', '2011', '2012']`\nor a mapping `Object`, like `{0:'1',9:'Target (10)', 15: 'Max'}`.",
                "value": {
                  "type": [
                    "ChartCategories",
                    "undefined"
                  ]
                }
              },
              {
                "name": "categoryMax",
                "description": "Category-axis maximum value. Defaults to `undefined`.",
                "value": {
                  "type": [
                    "number",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "categoryMin",
                "description": "Category-axis minimum value. Defaults to `undefined`.",
                "value": {
                  "type": [
                    "number",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "categoryPosition",
                "description": "The position of the category axis. Acceptable values are `left`, `right`, `top` and `bottom`\nexcept for bar charts which only accept `left` and `right`.\nWith the default value, charts appear as though they have `category-position=\"bottom\"`\nexcept for bar charts that appear as though they have `category-position=\"left\"`.\n\nDefaults to `undefined`",
                "value": {
                  "type": [
                    "ChartCategoryPosition",
                    "undefined"
                  ]
                }
              },
              {
                "name": "noLegend",
                "description": "Specifies whether to hide legend or show.\nLegend configuration can be set up via additionalOptions property",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "stacking",
                "description": "Specifies how series are stacked on top of each other.\nPossible values are null, \"normal\" or \"percent\".\nIf \"stack\" property is not defined on the vaadin-chart-series elements, then series will be put into\nthe default stack.",
                "value": {
                  "type": [
                    "ChartStacking",
                    "undefined"
                  ]
                }
              },
              {
                "name": "timeline",
                "description": "Specifies whether the chart is a normal chart or a timeline chart.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "title",
                "description": "Represents the title of the chart.",
                "value": {
                  "type": [
                    "string"
                  ]
                }
              },
              {
                "name": "tooltip",
                "description": "Whether or not to show tooltip when hovering data points.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "type",
                "description": "Sets the default series type of the chart.\nNote that `'bar'`, `'gauge'` and `'solidgauge'` should be set as default series type.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "subtitle",
                "description": "Represents the subtitle of the chart.",
                "value": {
                  "type": [
                    "string",
                    "undefined"
                  ]
                }
              },
              {
                "name": "chart3d",
                "description": "Specifies whether to show chart in 3 or in 2 dimensions.\nSome display angles are added by default to the \"chart.options3d\" (`{alpha: 15, beta: 15, depth: 50}`).\n3D display options can be modified via `additionalOptions`.\nThe thickness of a Pie chart can be set on `additionalOptions` through `plotOptions.pie.depth`.\n3D is supported by Bar, Column, Pie and Scatter3D charts.\nMore info available at [Highcharts](https://www.highcharts.com/docs/chart-concepts/3d-charts).",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "emptyText",
                "description": "Specifies the message displayed on a chart without displayable data.",
                "value": {
                  "type": [
                    "string"
                  ]
                }
              },
              {
                "name": "additionalOptions",
                "description": "Represents additional JSON configuration.",
                "value": {
                  "type": [
                    "Options",
                    "undefined"
                  ]
                }
              },
              {
                "name": "polar",
                "description": "When present, cartesian charts like line, spline, area and column are transformed\ninto the polar coordinate system.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              }
            ],
            "events": [
              {
                "name": "chart-add-series",
                "description": "Fired when a new series is added."
              },
              {
                "name": "chart-after-export",
                "description": "Fired after a chart is exported."
              },
              {
                "name": "chart-after-print",
                "description": "Fired after a chart is printed."
              },
              {
                "name": "chart-before-export",
                "description": "Fired before a chart is exported."
              },
              {
                "name": "chart-before-print",
                "description": "Fired before a chart is printed."
              },
              {
                "name": "chart-click",
                "description": "Fired when clicking on the plot background."
              },
              {
                "name": "chart-drilldown",
                "description": "Fired when drilldown point is clicked."
              },
              {
                "name": "chart-drillup",
                "description": "Fired when drilling up from a drilldown series."
              },
              {
                "name": "chart-drillupall",
                "description": "Fired after all the series has been drilled up if chart has multiple drilldown series."
              },
              {
                "name": "chart-load",
                "description": "Fired when the chart is finished loading."
              },
              {
                "name": "chart-redraw",
                "description": "Fired when the chart is redraw. Can be called after a `Chart.configuration.redraw()`\nor after an axis, series or point is modified with the `redraw` option set to `true`."
              },
              {
                "name": "chart-selection",
                "description": "Fired when an area of the chart has been selected."
              },
              {
                "name": "point-click",
                "description": "Fired when the point is clicked."
              },
              {
                "name": "point-legend-item-click",
                "description": "Fired when the legend item belonging to the point is clicked."
              },
              {
                "name": "point-mouse-out",
                "description": "Fired when the mouse leaves the area close to the point."
              },
              {
                "name": "point-mouse-over",
                "description": "Fired when the mouse enters the area close to the point."
              },
              {
                "name": "point-remove",
                "description": "Fired when the point is removed from the series."
              },
              {
                "name": "point-select",
                "description": "Fired when the point is selected either programmatically or by clicking on the point."
              },
              {
                "name": "point-unselect",
                "description": "Fired when the point is unselected either programmatically or by clicking on the point"
              },
              {
                "name": "point-update",
                "description": "Fired when the point is updated programmatically through `.updateConfiguration()` method."
              },
              {
                "name": "series-after-animate",
                "description": "Fired when the series has finished its initial animation."
              },
              {
                "name": "series-checkbox-click",
                "description": "Fired when the checkbox next to the series' name in the legend is clicked."
              },
              {
                "name": "series-click",
                "description": "Fired when the series is clicked."
              },
              {
                "name": "series-hide",
                "description": "Fired when the series is hidden after chart generation time."
              },
              {
                "name": "series-legend-item-click",
                "description": "Fired when the legend item belonging to the series is clicked."
              },
              {
                "name": "series-mouse-out",
                "description": "Fired when the mouses leave the graph."
              },
              {
                "name": "series-mouse-over",
                "description": "Fired when the mouse enters the graph."
              },
              {
                "name": "series-show",
                "description": "Fired when the series is show after chart generation time."
              },
              {
                "name": "xaxes-extremes-set",
                "description": "Fired when when the minimum and maximum is set for the x axis."
              },
              {
                "name": "yaxes-extremes-set",
                "description": "Fired when when the minimum and maximum is set for the y axis."
              }
            ]
          }
        }
      ]
    }
  }
}