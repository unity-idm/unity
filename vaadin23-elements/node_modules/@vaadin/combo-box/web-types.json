{
  "$schema": "https://json.schemastore.org/web-types",
  "name": "@vaadin/combo-box",
  "version": "23.2.0",
  "description-markup": "markdown",
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "vaadin-combo-box-light",
          "description": "`<vaadin-combo-box-light>` is a customizable version of the `<vaadin-combo-box>` providing\nonly the dropdown functionality and leaving the input field definition to the user.\n\nThe element has the same API as `<vaadin-combo-box>`.\n\nTo create a custom input field, you need to add a child element which has a two-way\ndata-bindable property representing the input value. The property name is expected\nto be `value` by default. For example, you can use `<vaadin-text-field>` element:\n\n```html\n<vaadin-combo-box-light>\n  <vaadin-text-field></vaadin-text-field>\n</vaadin-combo-box-light>\n```\n\nIf you are using custom input field that has other property for value,\nset `class=\"input\"` to enable corresponding logic, and use `attr-for-value`\nattribute to specify which property to use:\n\n```html\n<vaadin-combo-box-light attr-for-value=\"input-value\">\n  <custom-input class=\"input\"></custom-input>\n</vaadin-combo-box-light>\n```\n\nYou can also pass custom toggle and clear buttons with corresponding classes:\n\n```html\n<vaadin-combo-box-light>\n  <custom-input class=\"input\" attr-for-value=\"input-value\">\n    <button slot=\"suffix\" class=\"clear-button\">Clear</button>\n    <button slot=\"suffix\" class=\"toggle-button\">Toggle</button>\n  </custom-input>\n</vaadin-combo-box-light>\n```",
          "attributes": [
            {
              "name": "page-size",
              "description": "Number of items fetched at a time from the dataprovider.",
              "value": {
                "type": [
                  "number"
                ]
              }
            },
            {
              "name": "size",
              "description": "Total number of items.",
              "value": {
                "type": [
                  "number",
                  "undefined"
                ]
              }
            },
            {
              "name": "opened",
              "description": "True if the dropdown is open, false otherwise.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "auto-open-disabled",
              "description": "Set true to prevent the overlay from opening automatically.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "readonly",
              "description": "When present, it specifies that the field is read-only.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "allow-custom-value",
              "description": "If `true`, the user can input a value that is not present in the items list.\n`value` property will be set to the input value in this case.\nAlso, when `value` is set programmatically, the input value will be set\nto reflect that value.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "loading",
              "description": "When set to `true`, \"loading\" attribute is added to host and the overlay element.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "filter",
              "description": "Filtering string the user has typed into the input field.",
              "value": {
                "type": [
                  "string"
                ]
              }
            },
            {
              "name": "item-label-path",
              "description": "Path for label of the item. If `items` is an array of objects, the\n`itemLabelPath` is used to fetch the displayed string label for each\nitem.\n\nThe item label is also used for matching items when processing user\ninput, i.e., for filtering and selecting items.",
              "value": {
                "type": [
                  "string"
                ]
              }
            },
            {
              "name": "item-value-path",
              "description": "Path for the value of the item. If `items` is an array of objects, the\n`itemValuePath:` is used to fetch the string value for the selected\nitem.\n\nThe item value is used in the `value` property of the combo box,\nto provide the form value.",
              "value": {
                "type": [
                  "string"
                ]
              }
            },
            {
              "name": "item-id-path",
              "description": "Path for the id of the item. If `items` is an array of objects,\nthe `itemIdPath` is used to compare and identify the same item\nin `selectedItem` and `filteredItems` (items given by the\n`dataProvider` callback).",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "invalid",
              "description": "Set to true when the field is invalid.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "required",
              "description": "Specifies that the user must fill in a value.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "attr-for-value",
              "description": "Name of the two-way data-bindable property representing the\nvalue of the custom input field.",
              "value": {
                "type": [
                  "string"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "pageSize",
                "description": "Number of items fetched at a time from the dataprovider.",
                "value": {
                  "type": [
                    "number"
                  ]
                }
              },
              {
                "name": "size",
                "description": "Total number of items.",
                "value": {
                  "type": [
                    "number",
                    "undefined"
                  ]
                }
              },
              {
                "name": "dataProvider",
                "description": "Function that provides items lazily. Receives arguments `params`, `callback`\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filter` Currently applied filter\n\n`callback(items, size)` Callback function with arguments:\n  - `items` Current page of items\n  - `size` Total number of items.",
                "value": {
                  "type": [
                    "ComboBoxDataProvider",
                    "undefined"
                  ]
                }
              },
              {
                "name": "opened",
                "description": "True if the dropdown is open, false otherwise.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "autoOpenDisabled",
                "description": "Set true to prevent the overlay from opening automatically.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "readonly",
                "description": "When present, it specifies that the field is read-only.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "renderer",
                "description": "Custom function for rendering the content of every item.\nReceives three arguments:\n\n- `root` The `<vaadin-combo-box-item>` internal container DOM element.\n- `comboBox` The reference to the `<vaadin-combo-box>` element.\n- `model` The object with the properties related with the rendered\n  item, contains:\n  - `model.index` The index of the rendered item.\n  - `model.item` The item.",
                "value": {
                  "type": [
                    "ComboBoxRenderer",
                    "undefined"
                  ]
                }
              },
              {
                "name": "items",
                "description": "A full set of items to filter the visible options from.\nThe items can be of either `String` or `Object` type.",
                "value": {
                  "type": [
                    "Array.<ComboBoxItem",
                    "string>",
                    "undefined"
                  ]
                }
              },
              {
                "name": "allowCustomValue",
                "description": "If `true`, the user can input a value that is not present in the items list.\n`value` property will be set to the input value in this case.\nAlso, when `value` is set programmatically, the input value will be set\nto reflect that value.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "filteredItems",
                "description": "A subset of items, filtered based on the user input. Filtered items\ncan be assigned directly to omit the internal filtering functionality.\nThe items can be of either `String` or `Object` type.",
                "value": {
                  "type": [
                    "Array.<ComboBoxItem",
                    "string>",
                    "undefined"
                  ]
                }
              },
              {
                "name": "loading",
                "description": "When set to `true`, \"loading\" attribute is added to host and the overlay element.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "filter",
                "description": "Filtering string the user has typed into the input field.",
                "value": {
                  "type": [
                    "string"
                  ]
                }
              },
              {
                "name": "selectedItem",
                "description": "The selected item from the `items` array.",
                "value": {
                  "type": [
                    "ComboBoxItem",
                    "string",
                    "undefined"
                  ]
                }
              },
              {
                "name": "itemLabelPath",
                "description": "Path for label of the item. If `items` is an array of objects, the\n`itemLabelPath` is used to fetch the displayed string label for each\nitem.\n\nThe item label is also used for matching items when processing user\ninput, i.e., for filtering and selecting items.",
                "value": {
                  "type": [
                    "string"
                  ]
                }
              },
              {
                "name": "itemValuePath",
                "description": "Path for the value of the item. If `items` is an array of objects, the\n`itemValuePath:` is used to fetch the string value for the selected\nitem.\n\nThe item value is used in the `value` property of the combo box,\nto provide the form value.",
                "value": {
                  "type": [
                    "string"
                  ]
                }
              },
              {
                "name": "itemIdPath",
                "description": "Path for the id of the item. If `items` is an array of objects,\nthe `itemIdPath` is used to compare and identify the same item\nin `selectedItem` and `filteredItems` (items given by the\n`dataProvider` callback).",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "invalid",
                "description": "Set to true when the field is invalid.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "required",
                "description": "Specifies that the user must fill in a value.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "attrForValue",
                "description": "Name of the two-way data-bindable property representing the\nvalue of the custom input field.",
                "value": {
                  "type": [
                    "string"
                  ]
                }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when value changes.\nTo comply with https://developer.mozilla.org/en-US/docs/Web/Events/change"
              },
              {
                "name": "custom-value-set",
                "description": "Fired when the user sets a custom value."
              },
              {
                "name": "selected-item-changed",
                "description": "Fired when selected item changes."
              },
              {
                "name": "vaadin-combo-box-dropdown-closed",
                "description": "Fired after the `vaadin-combo-box-overlay` closes."
              },
              {
                "name": "vaadin-combo-box-dropdown-opened",
                "description": "Fired after the `vaadin-combo-box-overlay` opens."
              },
              {
                "name": "value-changed",
                "description": "Fired when the value changes."
              },
              {
                "name": "validated",
                "description": "Fired whenever the field is validated."
              }
            ]
          }
        },
        {
          "name": "vaadin-combo-box",
          "description": "`<vaadin-combo-box>` is a web component for choosing a value from a filterable list of options\npresented in a dropdown overlay. The options can be provided as a list of strings or objects\nby setting [`items`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-combo-box#property-items) property on the element.\n\n```html\n<vaadin-combo-box id=\"combo-box\"></vaadin-combo-box>\n```\n```js\ndocument.querySelector('#combo-box').items = ['apple', 'orange', 'banana'];\n```\n\nWhen the selected `value` is changed, a `value-changed` event is triggered.\n\n### Item rendering\n\nTo customize the content of the `<vaadin-combo-box-item>` elements placed in the dropdown, use\n[`renderer`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-combo-box#property-renderer) property which accepts a function.\nThe renderer function is called with `root`, `comboBox`, and `model` as arguments.\n\nGenerate DOM content by using `model` object properties if needed, and append it to the `root`\nelement. The `comboBox` reference is provided to access the combo-box element state. Do not\nset combo-box properties in a `renderer` function.\n\n```js\nconst comboBox = document.querySelector('#combo-box');\ncomboBox.items = [{'label': 'Hydrogen', 'value': 'H'}];\ncomboBox.renderer = (root, comboBox, model) => {\n  const item = model.item;\n  root.innerHTML = `${model.index}: ${item.label} <b>${item.value}</b>`;\n};\n```\n\nRenderer is called on the opening of the combo-box and each time the related model is updated.\nBefore creating new content, it is recommended to check if there is already an existing DOM\nelement in `root` from a previous renderer call for reusing it. Even though combo-box uses\ninfinite scrolling, reducing DOM operations might improve performance.\n\nThe following properties are available in the `model` argument:\n\nProperty   | Type             | Description\n-----------|------------------|-------------\n`index`    | Number           | Index of the item in the `items` array\n`item`     | String or Object | The item reference\n`selected` | Boolean          | True when item is selected\n`focused`  | Boolean          | True when item is focused\n\n### Lazy Loading with Function Data Provider\n\nIn addition to assigning an array to the items property, you can alternatively use the\n[`dataProvider`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-combo-box#property-dataProvider) function property.\nThe `<vaadin-combo-box>` calls this function lazily, only when it needs more data\nto be displayed.\n\n__Note that when using function data providers, the total number of items\nneeds to be set manually. The total number of items can be returned\nin the second argument of the data provider callback:__\n\n```javascript\ncomboBox.dataProvider = function(params, callback) {\n  var url = 'https://api.example/data' +\n      '?page=' + params.page +        // the requested page index\n      '&per_page=' + params.pageSize; // number of items on the page\n  var xhr = new XMLHttpRequest();\n  xhr.onload = function() {\n    var response = JSON.parse(xhr.responseText);\n    callback(\n      response.employees, // requested page of items\n      response.totalSize  // total number of items\n    );\n  };\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n```\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property                         | Description                | Default\n----------------------------------------|----------------------------|---------\n`--vaadin-field-default-width`          | Default width of the field | `12em`\n`--vaadin-combo-box-overlay-width`      | Width of the overlay       | `auto`\n`--vaadin-combo-box-overlay-max-height` | Max height of the overlay  | `65vh`\n\n`<vaadin-combo-box>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\nSee [`<vaadin-text-field>`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-text-field) for the styling documentation.\n\nIn addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n\nPart name       | Description\n----------------|----------------\n`toggle-button` | The toggle button\n\nIn addition to `<vaadin-text-field>` state attributes, the following state attributes are available for theming:\n\nAttribute | Description | Part name\n----------|-------------|------------\n`opened`  | Set when the combo box dropdown is open | :host\n`loading` | Set when new items are expected | :host\n\nIf you want to replace the default `<input>` and its container with a custom implementation to get full control\nover the input field, consider using the [`<vaadin-combo-box-light>`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-combo-box-light) element.\n\n### Internal components\n\nIn addition to `<vaadin-combo-box>` itself, the following internal\ncomponents are themable:\n\n- `<vaadin-combo-box-overlay>` - has the same API as [`<vaadin-overlay>`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-overlay).\n- `<vaadin-combo-box-item>` - has the same API as [`<vaadin-item>`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-item).\n- [`<vaadin-input-container>`](https://cdn.vaadin.com/vaadin-web-components/23.2.0/#/elements/vaadin-input-container) - an internal element wrapping the input.\n\nNote: the `theme` attribute value set on `<vaadin-combo-box>` is\npropagated to the internal components listed above.\n\nSee [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.",
          "attributes": [
            {
              "name": "disabled",
              "description": "If true, the user cannot interact with this element.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "autofocus",
              "description": "Specify that this control should have input focus when the page loads.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "label",
              "description": "The label text for the input node.\nWhen no light dom defined via [slot=label], this value will be used.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "invalid",
              "description": "Set to true when the field is invalid.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "required",
              "description": "Specifies that the user must fill in a value.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "error-message",
              "description": "Error to show when the field is invalid.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "helper-text",
              "description": "String used for the helper text.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "value",
              "description": "The value of the field.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "allowed-char-pattern",
              "description": "A pattern matched against individual characters the user inputs.\n\nWhen set, the field will prevent:\n- `keydown` events if the entered key doesn't match `/^allowedCharPattern$/`\n- `paste` events if the pasted text doesn't match `/^allowedCharPattern*$/`\n- `drop` events if the dropped text doesn't match `/^allowedCharPattern*$/`\n\nFor example, to allow entering only numbers and minus signs, use:\n`allowedCharPattern = \"[\\\\d-]\"`",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "autoselect",
              "description": "If true, the input text gets fully selected when the field is focused using click or touch / tap.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "clear-button-visible",
              "description": "Set to true to display the clear icon which clears the input.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "name",
              "description": "The name of this field.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "placeholder",
              "description": "A hint to the user of what can be entered in the field.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "readonly",
              "description": "When present, it specifies that the field is read-only.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "title",
              "description": "The text usually displayed in a tooltip popup when the mouse is over the field.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "pattern",
              "description": "A regular expression that the value is checked against.\nThe pattern must match the entire value, not just some subset.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "prevent-invalid-input",
              "description": "When set to true, user is prevented from typing a value that\nconflicts with the given `pattern`.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "page-size",
              "description": "Number of items fetched at a time from the dataprovider.",
              "value": {
                "type": [
                  "number"
                ]
              }
            },
            {
              "name": "size",
              "description": "Total number of items.",
              "value": {
                "type": [
                  "number",
                  "undefined"
                ]
              }
            },
            {
              "name": "opened",
              "description": "True if the dropdown is open, false otherwise.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "auto-open-disabled",
              "description": "Set true to prevent the overlay from opening automatically.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "allow-custom-value",
              "description": "If `true`, the user can input a value that is not present in the items list.\n`value` property will be set to the input value in this case.\nAlso, when `value` is set programmatically, the input value will be set\nto reflect that value.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "loading",
              "description": "When set to `true`, \"loading\" attribute is added to host and the overlay element.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "filter",
              "description": "Filtering string the user has typed into the input field.",
              "value": {
                "type": [
                  "string"
                ]
              }
            },
            {
              "name": "item-label-path",
              "description": "Path for label of the item. If `items` is an array of objects, the\n`itemLabelPath` is used to fetch the displayed string label for each\nitem.\n\nThe item label is also used for matching items when processing user\ninput, i.e., for filtering and selecting items.",
              "value": {
                "type": [
                  "string"
                ]
              }
            },
            {
              "name": "item-value-path",
              "description": "Path for the value of the item. If `items` is an array of objects, the\n`itemValuePath:` is used to fetch the string value for the selected\nitem.\n\nThe item value is used in the `value` property of the combo box,\nto provide the form value.",
              "value": {
                "type": [
                  "string"
                ]
              }
            },
            {
              "name": "item-id-path",
              "description": "Path for the id of the item. If `items` is an array of objects,\nthe `itemIdPath` is used to compare and identify the same item\nin `selectedItem` and `filteredItems` (items given by the\n`dataProvider` callback).",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "If true, the user cannot interact with this element.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "autofocus",
                "description": "Specify that this control should have input focus when the page loads.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "label",
                "description": "The label text for the input node.\nWhen no light dom defined via [slot=label], this value will be used.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "invalid",
                "description": "Set to true when the field is invalid.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "required",
                "description": "Specifies that the user must fill in a value.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "errorMessage",
                "description": "Error to show when the field is invalid.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "helperText",
                "description": "String used for the helper text.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "value",
                "description": "The value of the field.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "allowedCharPattern",
                "description": "A pattern matched against individual characters the user inputs.\n\nWhen set, the field will prevent:\n- `keydown` events if the entered key doesn't match `/^allowedCharPattern$/`\n- `paste` events if the pasted text doesn't match `/^allowedCharPattern*$/`\n- `drop` events if the dropped text doesn't match `/^allowedCharPattern*$/`\n\nFor example, to allow entering only numbers and minus signs, use:\n`allowedCharPattern = \"[\\\\d-]\"`",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "autoselect",
                "description": "If true, the input text gets fully selected when the field is focused using click or touch / tap.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "clearButtonVisible",
                "description": "Set to true to display the clear icon which clears the input.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "name",
                "description": "The name of this field.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "placeholder",
                "description": "A hint to the user of what can be entered in the field.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "readonly",
                "description": "When present, it specifies that the field is read-only.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "title",
                "description": "The text usually displayed in a tooltip popup when the mouse is over the field.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "pattern",
                "description": "A regular expression that the value is checked against.\nThe pattern must match the entire value, not just some subset.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "preventInvalidInput",
                "description": "When set to true, user is prevented from typing a value that\nconflicts with the given `pattern`.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "pageSize",
                "description": "Number of items fetched at a time from the dataprovider.",
                "value": {
                  "type": [
                    "number"
                  ]
                }
              },
              {
                "name": "size",
                "description": "Total number of items.",
                "value": {
                  "type": [
                    "number",
                    "undefined"
                  ]
                }
              },
              {
                "name": "dataProvider",
                "description": "Function that provides items lazily. Receives arguments `params`, `callback`\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filter` Currently applied filter\n\n`callback(items, size)` Callback function with arguments:\n  - `items` Current page of items\n  - `size` Total number of items.",
                "value": {
                  "type": [
                    "ComboBoxDataProvider",
                    "undefined"
                  ]
                }
              },
              {
                "name": "opened",
                "description": "True if the dropdown is open, false otherwise.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "autoOpenDisabled",
                "description": "Set true to prevent the overlay from opening automatically.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "renderer",
                "description": "Custom function for rendering the content of every item.\nReceives three arguments:\n\n- `root` The `<vaadin-combo-box-item>` internal container DOM element.\n- `comboBox` The reference to the `<vaadin-combo-box>` element.\n- `model` The object with the properties related with the rendered\n  item, contains:\n  - `model.index` The index of the rendered item.\n  - `model.item` The item.",
                "value": {
                  "type": [
                    "ComboBoxRenderer",
                    "undefined"
                  ]
                }
              },
              {
                "name": "items",
                "description": "A full set of items to filter the visible options from.\nThe items can be of either `String` or `Object` type.",
                "value": {
                  "type": [
                    "Array.<ComboBoxItem",
                    "string>",
                    "undefined"
                  ]
                }
              },
              {
                "name": "allowCustomValue",
                "description": "If `true`, the user can input a value that is not present in the items list.\n`value` property will be set to the input value in this case.\nAlso, when `value` is set programmatically, the input value will be set\nto reflect that value.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "filteredItems",
                "description": "A subset of items, filtered based on the user input. Filtered items\ncan be assigned directly to omit the internal filtering functionality.\nThe items can be of either `String` or `Object` type.",
                "value": {
                  "type": [
                    "Array.<ComboBoxItem",
                    "string>",
                    "undefined"
                  ]
                }
              },
              {
                "name": "loading",
                "description": "When set to `true`, \"loading\" attribute is added to host and the overlay element.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "filter",
                "description": "Filtering string the user has typed into the input field.",
                "value": {
                  "type": [
                    "string"
                  ]
                }
              },
              {
                "name": "selectedItem",
                "description": "The selected item from the `items` array.",
                "value": {
                  "type": [
                    "ComboBoxItem",
                    "string",
                    "undefined"
                  ]
                }
              },
              {
                "name": "itemLabelPath",
                "description": "Path for label of the item. If `items` is an array of objects, the\n`itemLabelPath` is used to fetch the displayed string label for each\nitem.\n\nThe item label is also used for matching items when processing user\ninput, i.e., for filtering and selecting items.",
                "value": {
                  "type": [
                    "string"
                  ]
                }
              },
              {
                "name": "itemValuePath",
                "description": "Path for the value of the item. If `items` is an array of objects, the\n`itemValuePath:` is used to fetch the string value for the selected\nitem.\n\nThe item value is used in the `value` property of the combo box,\nto provide the form value.",
                "value": {
                  "type": [
                    "string"
                  ]
                }
              },
              {
                "name": "itemIdPath",
                "description": "Path for the id of the item. If `items` is an array of objects,\nthe `itemIdPath` is used to compare and identify the same item\nin `selectedItem` and `filteredItems` (items given by the\n`dataProvider` callback).",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              }
            ],
            "events": [
              {
                "name": "validated",
                "description": "Fired whenever the field is validated."
              },
              {
                "name": "change",
                "description": "Fired when value changes.\nTo comply with https://developer.mozilla.org/en-US/docs/Web/Events/change"
              },
              {
                "name": "input",
                "description": "Fired when the value is changed by the user: on every typing keystroke,\nand the value is cleared using the clear button."
              },
              {
                "name": "custom-value-set",
                "description": "Fired when the user sets a custom value."
              },
              {
                "name": "selected-item-changed",
                "description": "Fired when selected item changes."
              },
              {
                "name": "vaadin-combo-box-dropdown-closed",
                "description": "Fired after the `vaadin-combo-box-overlay` closes."
              },
              {
                "name": "vaadin-combo-box-dropdown-opened",
                "description": "Fired after the `vaadin-combo-box-overlay` opens."
              },
              {
                "name": "value-changed",
                "description": "Fired when the value changes."
              }
            ]
          }
        }
      ]
    }
  }
}