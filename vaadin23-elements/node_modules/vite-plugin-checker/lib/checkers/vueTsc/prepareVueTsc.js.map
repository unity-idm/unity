{"version":3,"sources":["../../../src/checkers/vueTsc/prepareVueTsc.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\nconst proxyPath = require.resolve('vue-tsc/out/proxy')\n\nconst textToReplace: { target: string; replacement: string }[] = [\n  {\n    target: `ts.supportedTSExtensions = [[\".ts\", \".tsx\", \".d.ts\"], [\".cts\", \".d.cts\"], [\".mts\", \".d.mts\"]];`,\n    replacement: `ts.supportedTSExtensions = [[\".ts\", \".tsx\", \".d.ts\"], [\".cts\", \".d.cts\"], [\".mts\", \".d.mts\"], [\".vue\"]];`,\n  },\n  {\n    target: `ts.supportedJSExtensions = [[\".js\", \".jsx\"], [\".mjs\"], [\".cjs\"]];`,\n    replacement: `ts.supportedJSExtensions = [[\".js\", \".jsx\"], [\".mjs\"], [\".cjs\"], [\".vue\"]];`,\n  },\n\n  {\n    target: `var allSupportedExtensions = [[\".ts\", \".tsx\", \".d.ts\", \".js\", \".jsx\"], [\".cts\", \".d.cts\", \".cjs\"], [\".mts\", \".d.mts\", \".mjs\"]];`,\n    replacement: `var allSupportedExtensions = [[\".ts\", \".tsx\", \".d.ts\", \".js\", \".jsx\"], [\".cts\", \".d.cts\", \".cjs\"], [\".mts\", \".d.mts\", \".mjs\"], [\".vue\"]];`,\n  },\n\n  // proxy createProgram apis\n  {\n    target: `function createIncrementalProgram(_a) {`,\n    replacement: `function createIncrementalProgram(_a) { console.error('incremental mode is not yet supported'); throw 'incremental mode is not yet supported';`,\n  },\n  {\n    target: `function createProgram(rootNamesOrOptions, _options, _host, _oldProgram, _configFileParsingDiagnostics) {`,\n    replacement: `function createProgram(rootNamesOrOptions, _options, _host, _oldProgram, _configFileParsingDiagnostics) { return require(${JSON.stringify(\n      proxyPath\n    )}).createProgramProxy(...arguments);`,\n  },\n  {\n    target: `ts.executeCommandLine(ts.sys, ts.noop, ts.sys.args);`,\n    replacement: `module.exports = ts`,\n  },\n]\n\nexport function prepareVueTsc() {\n  // 1. copy typescript to folder\n  const targetTsDir = path.resolve(__dirname, 'typescript-vue-tsc')\n  const vueTscFlagFile = path.resolve(targetTsDir, 'vue-tsc-resolve-path')\n\n  let shouldPrepare = true\n  const targetDirExist = fs.existsSync(targetTsDir)\n  if (targetDirExist) {\n    const targetTsVersion = require(path.resolve(targetTsDir, 'package.json')).version\n    const currTsVersion = require('typescript/package.json').version\n    // check fixture versions before re-use\n    if (\n      targetTsVersion === currTsVersion &&\n      fs.existsSync(vueTscFlagFile) &&\n      fs.readFileSync(vueTscFlagFile, 'utf8') === proxyPath\n    ) {\n      shouldPrepare = true\n    }\n  }\n\n  if (shouldPrepare) {\n    rimraf(targetTsDir)\n    fs.mkdirSync(targetTsDir)\n    const sourceTsDir = path.resolve(require.resolve('typescript'), '../..')\n    copyDirRecursively(sourceTsDir, targetTsDir)\n    fs.writeFileSync(vueTscFlagFile, proxyPath)\n\n    // 2. sync modification of lib/tsc.js with vue-tsc\n    const tscJs = require.resolve(path.resolve(targetTsDir, 'lib/tsc.js'))\n    modifyFileText(tscJs, textToReplace)\n  }\n\n  return { targetTsDir: targetTsDir }\n}\n\nfunction modifyFileText(\n  filePath: string,\n  textToReplace: { target: string; replacement: string }[]\n) {\n  const text = fs.readFileSync(filePath, 'utf8')\n  let newText = text\n  for (const { target, replacement } of textToReplace) {\n    newText = newText.replace(target, replacement)\n  }\n  fs.writeFileSync(filePath, newText)\n}\n\nfunction copyDirRecursively(src: string, dest: string) {\n  const files = fs.readdirSync(src, { withFileTypes: true })\n  for (const file of files) {\n    const srcPath = path.join(src, file.name)\n    const destPath = path.join(dest, file.name)\n    if (file.isDirectory()) {\n      fs.mkdirSync(destPath, { recursive: true })\n      copyDirRecursively(srcPath, destPath)\n    } else {\n      fs.copyFileSync(srcPath, destPath)\n    }\n  }\n}\n\n/**\n * https://stackoverflow.com/a/42505874\n */\nfunction rimraf(dir_path: string) {\n  if (fs.existsSync(dir_path)) {\n    fs.readdirSync(dir_path).forEach((entry) => {\n      const entry_path = path.join(dir_path, entry)\n      if (fs.lstatSync(entry_path).isDirectory()) {\n        rimraf(entry_path)\n      } else {\n        fs.unlinkSync(entry_path)\n      }\n    })\n    fs.rmdirSync(dir_path)\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,kBAAiB;AAEjB,MAAM,YAA4B;AAElC,MAAM,gBAA2D;AAAA,EAC/D;AAAA,IACE,QAAQ;AAAA,IACR,aAAa;AAAA,EACf;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,IACR,aAAa;AAAA,EACf;AAAA,EAEA;AAAA,IACE,QAAQ;AAAA,IACR,aAAa;AAAA,EACf;AAAA,EAGA;AAAA,IACE,QAAQ;AAAA,IACR,aAAa;AAAA,EACf;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,IACR,aAAa,4HAA4H,KAAK,UAC5I,SACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,QAAQ;AAAA,IACR,aAAa;AAAA,EACf;AACF;AAEO,yBAAyB;AAE9B,QAAM,cAAc,oBAAK,QAAQ,WAAW,oBAAoB;AAChE,QAAM,iBAAiB,oBAAK,QAAQ,aAAa,sBAAsB;AAEvE,MAAI,gBAAgB;AACpB,QAAM,iBAAiB,kBAAG,WAAW,WAAW;AAChD,MAAI,gBAAgB;AAClB,UAAM,kBAAkB,QAAQ,oBAAK,QAAQ,aAAa,cAAc,CAAC,EAAE;AAC3E,UAAM,gBAAgB,QAAQ,yBAAyB,EAAE;AAEzD,QACE,oBAAoB,iBACpB,kBAAG,WAAW,cAAc,KAC5B,kBAAG,aAAa,gBAAgB,MAAM,MAAM,WAC5C;AACA,sBAAgB;AAAA,IAClB;AAAA,EACF;AAEA,MAAI,eAAe;AACjB,WAAO,WAAW;AAClB,sBAAG,UAAU,WAAW;AACxB,UAAM,cAAc,oBAAK,QAAwB,+BAAe,OAAO;AACvE,uBAAmB,aAAa,WAAW;AAC3C,sBAAG,cAAc,gBAAgB,SAAS;AAG1C,UAAM,QAAwB,AAAhB,QAAQ,QAAQ,oBAAK,QAAQ,aAAa,YAAY;AACpE,mBAAe,OAAO,aAAa;AAAA,EACrC;AAEA,SAAO,EAAE,YAAyB;AACpC;AAEA,wBACE,UACA,gBACA;AACA,QAAM,OAAO,kBAAG,aAAa,UAAU,MAAM;AAC7C,MAAI,UAAU;AACd,aAAW,EAAE,QAAQ,iBAAiB,gBAAe;AACnD,cAAU,QAAQ,QAAQ,QAAQ,WAAW;AAAA,EAC/C;AACA,oBAAG,cAAc,UAAU,OAAO;AACpC;AAEA,4BAA4B,KAAa,MAAc;AACrD,QAAM,QAAQ,kBAAG,YAAY,KAAK,EAAE,eAAe,KAAK,CAAC;AACzD,aAAW,QAAQ,OAAO;AACxB,UAAM,UAAU,oBAAK,KAAK,KAAK,KAAK,IAAI;AACxC,UAAM,WAAW,oBAAK,KAAK,MAAM,KAAK,IAAI;AAC1C,QAAI,KAAK,YAAY,GAAG;AACtB,wBAAG,UAAU,UAAU,EAAE,WAAW,KAAK,CAAC;AAC1C,yBAAmB,SAAS,QAAQ;AAAA,IACtC,OAAO;AACL,wBAAG,aAAa,SAAS,QAAQ;AAAA,IACnC;AAAA,EACF;AACF;AAKA,gBAAgB,UAAkB;AAChC,MAAI,kBAAG,WAAW,QAAQ,GAAG;AAC3B,sBAAG,YAAY,QAAQ,EAAE,QAAQ,CAAC,UAAU;AAC1C,YAAM,aAAa,oBAAK,KAAK,UAAU,KAAK;AAC5C,UAAI,kBAAG,UAAU,UAAU,EAAE,YAAY,GAAG;AAC1C,eAAO,UAAU;AAAA,MACnB,OAAO;AACL,0BAAG,WAAW,UAAU;AAAA,MAC1B;AAAA,IACF,CAAC;AACD,sBAAG,UAAU,QAAQ;AAAA,EACvB;AACF;","names":[]}