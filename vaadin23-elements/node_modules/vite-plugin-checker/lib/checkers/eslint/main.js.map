{"version":3,"sources":["../../../src/checkers/eslint/main.ts"],"sourcesContent":["import chokidar from 'chokidar'\nimport { ESLint } from 'eslint'\n// @ts-ignore\nimport optionator from './options'\nimport path from 'path'\nimport invariant from 'tiny-invariant'\nimport { parentPort } from 'worker_threads'\n\nimport { Checker } from '../../Checker'\nimport { FileDiagnosticManager } from '../../FileDiagnosticManager'\nimport {\n  consoleLog,\n  diagnosticToTerminalLog,\n  diagnosticToRuntimeError,\n  filterLogLevel,\n  normalizeEslintDiagnostic,\n  toViteCustomPayload,\n  composeCheckerSummary,\n} from '../../logger'\nimport { ACTION_TYPES, DiagnosticLevel } from '../../types'\nimport { translateOptions } from './cli'\n\nconst manager = new FileDiagnosticManager()\n\nimport type { CreateDiagnostic } from '../../types'\nconst createDiagnostic: CreateDiagnostic<'eslint'> = (pluginConfig) => {\n  let overlay = true\n  let terminal = true\n\n  return {\n    config: async ({ enableOverlay, enableTerminal }) => {\n      overlay = enableOverlay\n      terminal = enableTerminal\n    },\n    async configureServer({ root }) {\n      if (!pluginConfig.eslint) return\n\n      const options = optionator.parse(pluginConfig.eslint.lintCommand)\n      const translatedOptions = translateOptions(options) as ESLint.Options\n\n      const logLevel = (() => {\n        if (typeof pluginConfig.eslint !== 'object') return undefined\n        const userLogLevel = pluginConfig.eslint.dev?.logLevel\n        if (!userLogLevel) return undefined\n        const map = {\n          error: DiagnosticLevel.Error,\n          warning: DiagnosticLevel.Warning,\n        } as const\n\n        return userLogLevel.map((l) => map[l])\n      })()\n\n      const eslint = new ESLint({\n        cwd: root,\n        ...translatedOptions,\n        ...pluginConfig.eslint.dev?.overrideConfig,\n      })\n\n      const dispatchDiagnostics = () => {\n        const diagnostics = filterLogLevel(manager.getDiagnostics(), logLevel)\n\n        if (terminal) {\n          diagnostics.forEach((d) => {\n            consoleLog(diagnosticToTerminalLog(d, 'ESLint'))\n          })\n          const errorCount = diagnostics.filter((d) => d.level === DiagnosticLevel.Error).length\n          const warningCount = diagnostics.filter((d) => d.level === DiagnosticLevel.Warning).length\n          consoleLog(composeCheckerSummary('ESLint', errorCount, warningCount))\n        }\n\n        if (overlay) {\n          parentPort?.postMessage({\n            type: ACTION_TYPES.overlayError,\n            payload: toViteCustomPayload(\n              'eslint',\n              diagnostics.map((d) => diagnosticToRuntimeError(d))\n            ),\n          })\n        }\n      }\n\n      const handleFileChange = async (filePath: string, type: 'change' | 'unlink') => {\n        const absPath = path.resolve(root, filePath)\n\n        if (type === 'unlink') {\n          manager.updateByFileId(absPath, [])\n        } else if (type === 'change') {\n          const diagnosticsOfChangedFile = await eslint.lintFiles(filePath)\n          const newDiagnostics = diagnosticsOfChangedFile\n            .map((d) => normalizeEslintDiagnostic(d))\n            .flat(1)\n          manager.updateByFileId(absPath, newDiagnostics)\n        }\n\n        dispatchDiagnostics()\n      }\n\n      // initial lint\n      const files = options._.slice(1)\n      const diagnostics = await eslint.lintFiles(files)\n\n      manager.initWith(diagnostics.map((p) => normalizeEslintDiagnostic(p)).flat(1))\n      dispatchDiagnostics()\n\n      // watch lint\n      const watcher = chokidar.watch([], {\n        cwd: root,\n        ignored: (path: string) => path.includes('node_modules'),\n      })\n      watcher.add(files)\n      watcher.on('change', async (filePath) => {\n        handleFileChange(filePath, 'change')\n      })\n      watcher.on('unlink', async (filePath) => {\n        handleFileChange(filePath, 'unlink')\n      })\n    },\n  }\n}\n\nexport class EslintChecker extends Checker<'eslint'> {\n  public constructor() {\n    super({\n      name: 'eslint',\n      absFilePath: __filename,\n      build: {\n        buildBin: (pluginConfig) => {\n          if (pluginConfig.eslint) {\n            const { lintCommand } = pluginConfig.eslint\n            return ['eslint', lintCommand.split(' ').slice(1)]\n          }\n          return ['eslint', ['']]\n        },\n      },\n      createDiagnostic,\n    })\n  }\n\n  public init() {\n    const createServeAndBuild = super.initMainThread()\n    module.exports.createServeAndBuild = createServeAndBuild\n    super.initWorkerThread()\n  }\n}\n\nconst eslintChecker = new EslintChecker()\neslintChecker.prepare()\neslintChecker.init()\n"],"mappings":"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","names":[]}