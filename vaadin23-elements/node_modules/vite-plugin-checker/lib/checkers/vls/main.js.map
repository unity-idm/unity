{"version":3,"sources":["../../../src/checkers/vls/main.ts"],"sourcesContent":["import os from 'os'\nimport { parentPort } from 'worker_threads'\n\nimport { Checker } from '../../Checker'\nimport {\n  composeCheckerSummary,\n  consoleLog,\n  diagnosticToRuntimeError,\n  diagnosticToTerminalLog,\n  toViteCustomPayload,\n} from '../../logger'\nimport { ACTION_TYPES, DiagnosticLevel } from '../../types'\nimport { DiagnosticOptions, diagnostics } from './diagnostics'\n\nimport type { ConfigEnv } from 'vite'\n\nimport type { CreateDiagnostic } from '../../types'\nexport const createDiagnostic: CreateDiagnostic<'vls'> = (pluginConfig) => {\n  let overlay = true\n  let terminal = true\n  let command: ConfigEnv['command']\n\n  return {\n    config: ({ enableOverlay, enableTerminal, env }) => {\n      overlay = enableOverlay\n      terminal = enableTerminal\n      command = env.command\n    },\n    async configureServer({ root }) {\n      const workDir: string = root\n\n      const onDispatchDiagnosticsSummary: DiagnosticOptions['onDispatchDiagnosticsSummary'] = (\n        errorCount,\n        warningCount\n      ) => {\n        if (!terminal) return\n\n        consoleLog(composeCheckerSummary('VLS', errorCount, warningCount))\n      }\n\n      const onDispatchDiagnostics: DiagnosticOptions['onDispatchDiagnostics'] = (normalized) => {\n        if (overlay && command === 'serve') {\n          parentPort?.postMessage({\n            type: ACTION_TYPES.overlayError,\n            payload: toViteCustomPayload('vls', diagnosticToRuntimeError(normalized)),\n          })\n        }\n\n        if (terminal) {\n          consoleLog(normalized.map((d) => diagnosticToTerminalLog(d, 'VLS')).join(os.EOL))\n        }\n      }\n\n      const vlsConfig = pluginConfig?.vls\n      await diagnostics(workDir, 'WARN', {\n        onDispatchDiagnostics,\n        onDispatchDiagnosticsSummary,\n        watch: true,\n        verbose: false,\n        config: typeof vlsConfig === 'object' ? vlsConfig : null,\n      })\n    },\n  }\n}\n\nexport class VlsChecker extends Checker<'vls'> {\n  public constructor() {\n    super({\n      name: 'vls',\n      absFilePath: __filename,\n      build: {\n        buildBin: (config) => {\n          if (typeof config.vls === 'object') {\n            return [\n              'vite-plugin-checker-vls',\n              [\n                'diagnostics',\n                '--checker-config',\n                // Escape quotes so that the system shell doesn't strip them out:\n                '\"' + JSON.stringify(config.vls).replace(/[\\\\\"]/g, '\\\\$&') + '\"',\n              ],\n            ]\n          }\n\n          return ['vite-plugin-checker-vls', ['diagnostics']]\n        },\n      },\n      createDiagnostic,\n    })\n  }\n\n  public init() {\n    const createServeAndBuild = super.initMainThread()\n    module.exports.createServeAndBuild = createServeAndBuild\n\n    super.initWorkerThread()\n  }\n}\n\nconst vlsChecker = new VlsChecker()\nvlsChecker.prepare()\nvlsChecker.init()\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,4BAA2B;AAE3B,qBAAwB;AACxB,oBAMO;AACP,mBAA8C;AAC9C,yBAA+C;AAKxC,MAAM,mBAA4C,CAAC,iBAAiB;AACzE,MAAI,UAAU;AACd,MAAI,WAAW;AACf,MAAI;AAEJ,SAAO;AAAA,IACL,QAAQ,CAAC,EAAE,eAAe,gBAAgB,UAAU;AAClD,gBAAU;AACV,iBAAW;AACX,gBAAU,IAAI;AAAA,IAChB;AAAA,UACM,gBAAgB,EAAE,QAAQ;AAC9B,YAAM,UAAkB;AAExB,YAAM,+BAAkF,CACtF,YACA,iBACG;AACH,YAAI,CAAC;AAAU;AAEf,sCAAW,yCAAsB,OAAO,YAAY,YAAY,CAAC;AAAA,MACnE;AAEA,YAAM,wBAAoE,CAAC,eAAe;AAxChG;AAyCQ,YAAI,WAAW,YAAY,SAAS;AAClC,wEAAY,YAAY;AAAA,YACtB,MAAM,0BAAa;AAAA,YACnB,SAAS,uCAAoB,OAAO,4CAAyB,UAAU,CAAC;AAAA,UAC1E;AAAA,QACF;AAEA,YAAI,UAAU;AACZ,wCAAW,WAAW,IAAI,CAAC,MAAM,2CAAwB,GAAG,KAAK,CAAC,EAAE,KAAK,kBAAG,GAAG,CAAC;AAAA,QAClF;AAAA,MACF;AAEA,YAAM,YAAY,6CAAc;AAChC,YAAM,oCAAY,SAAS,QAAQ;AAAA,QACjC;AAAA,QACA;AAAA,QACA,OAAO;AAAA,QACP,SAAS;AAAA,QACT,QAAQ,OAAO,cAAc,WAAW,YAAY;AAAA,MACtD,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEO,MAAM,mBAAmB,uBAAe;AAAA,EACtC,cAAc;AACnB,UAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,OAAO;AAAA,QACL,UAAU,CAAC,WAAW;AACpB,cAAI,OAAO,OAAO,QAAQ,UAAU;AAClC,mBAAO;AAAA,cACL;AAAA,cACA;AAAA,gBACE;AAAA,gBACA;AAAA,gBAEA,MAAM,KAAK,UAAU,OAAO,GAAG,EAAE,QAAQ,UAAU,MAAM,IAAI;AAAA,cAC/D;AAAA,YACF;AAAA,UACF;AAEA,iBAAO,CAAC,2BAA2B,CAAC,aAAa,CAAC;AAAA,QACpD;AAAA,MACF;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEO,OAAO;AACZ,UAAM,sBAAsB,MAAM,eAAe;AACjD,WAAO,QAAQ,sBAAsB;AAErC,UAAM,iBAAiB;AAAA,EACzB;AACF;AAEA,MAAM,aAAa,IAAI,WAAW;AAClC,WAAW,QAAQ;AACnB,WAAW,KAAK;","names":[]}