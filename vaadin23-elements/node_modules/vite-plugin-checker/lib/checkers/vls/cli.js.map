{"version":3,"sources":["../../../src/checkers/vls/cli.ts"],"sourcesContent":["import { Command, Option } from 'commander'\n\nimport { diagnostics, LogLevel, logLevels } from './diagnostics'\n\nfunction getVersion(): string {\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  const { version }: { version: string } = require('../../../package.json')\n  return `v${version}`\n}\n\nfunction validateLogLevel(logLevelInput: unknown): logLevelInput is LogLevel {\n  return (\n    typeof logLevelInput === 'string' &&\n    (logLevels as ReadonlyArray<string>).includes(logLevelInput)\n  )\n}\n\n;(async () => {\n  const program = new Command()\n  program.name('vti').description('Vetur Terminal Interface').version(getVersion())\n\n  program\n    .command('diagnostics [workspace]')\n    .description('Print all diagnostics')\n    .addOption(\n      new Option('-c, --checker-config <checkerConfig>', 'Option overrides to pass to VTI').default(\n        '{}'\n      )\n    )\n    .addOption(\n      new Option('-l, --log-level <logLevel>', 'Log level to print')\n        .default('WARN')\n        // logLevels is readonly array but .choices need read-write array (because of weak typing)\n        .choices(logLevels as unknown as string[])\n    )\n    .action(async (workspace, options) => {\n      const logLevelOption: unknown = options.logLevel\n\n      if (!validateLogLevel(logLevelOption)) {\n        throw new Error(`Invalid log level: ${logLevelOption}`)\n      }\n\n      let parsedConfig\n      try {\n        parsedConfig = JSON.parse(options.checkerConfig) as any\n      } catch {\n        throw new Error(`Unable to parse checker-config JSON: ${options.checkerConfig}`)\n      }\n\n      await diagnostics(workspace, logLevelOption, {\n        watch: false,\n        verbose: false,\n        config: parsedConfig,\n      })\n    })\n\n  program.parse(process.argv)\n})().catch((err) => {\n  console.error(`VTI operation failed with error`)\n  console.error(err.stack)\n  process.exit(1)\n})\n"],"mappings":"AAAA,uBAAgC;AAEhC,yBAAiD;AAEjD,sBAA8B;AAE5B,QAAM,EAAE,YAAiC,QAAQ,uBAAuB;AACxE,SAAO,IAAI;AACb;AAEA,0BAA0B,eAAmD;AAC3E,SACE,OAAO,kBAAkB,YACxB,6BAAoC,SAAS,aAAa;AAE/D;AAEA;AAAC,AAAC,aAAY;AACZ,QAAM,UAAU,IAAI,yBAAQ;AAC5B,UAAQ,KAAK,KAAK,EAAE,YAAY,0BAA0B,EAAE,QAAQ,WAAW,CAAC;AAEhF,UACG,QAAQ,yBAAyB,EACjC,YAAY,uBAAuB,EACnC,UACC,IAAI,wBAAO,wCAAwC,iCAAiC,EAAE,QACpF,IACF,CACF,EACC,UACC,IAAI,wBAAO,8BAA8B,oBAAoB,EAC1D,QAAQ,MAAM,EAEd,QAAQ,4BAAgC,CAC7C,EACC,OAAO,OAAO,WAAW,YAAY;AACpC,UAAM,iBAA0B,QAAQ;AAExC,QAAI,CAAC,iBAAiB,cAAc,GAAG;AACrC,YAAM,IAAI,MAAM,sBAAsB,gBAAgB;AAAA,IACxD;AAEA,QAAI;AACJ,QAAI;AACF,qBAAe,KAAK,MAAM,QAAQ,aAAa;AAAA,IACjD,QAAE;AACA,YAAM,IAAI,MAAM,wCAAwC,QAAQ,eAAe;AAAA,IACjF;AAEA,UAAM,oCAAY,WAAW,gBAAgB;AAAA,MAC3C,OAAO;AAAA,MACP,SAAS;AAAA,MACT,QAAQ;AAAA,IACV,CAAC;AAAA,EACH,CAAC;AAEH,UAAQ,MAAM,QAAQ,IAAI;AAC5B,GAAG,EAAE,MAAM,CAAC,QAAQ;AAClB,UAAQ,MAAM,iCAAiC;AAC/C,UAAQ,MAAM,IAAI,KAAK;AACvB,UAAQ,KAAK,CAAC;AAChB,CAAC;","names":[]}