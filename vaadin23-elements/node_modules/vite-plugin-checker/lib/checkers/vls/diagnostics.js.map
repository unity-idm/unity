{"version":3,"sources":["../../../src/checkers/vls/diagnostics.ts"],"sourcesContent":["import chalk from 'chalk'\nimport chokidar from 'chokidar'\nimport glob from 'fast-glob'\nimport fs from 'fs'\nimport os from 'os'\nimport path from 'path'\nimport { Duplex } from 'stream'\nimport { VLS } from 'vls'\nimport { TextDocument } from 'vscode-languageserver-textdocument'\nimport {\n  createConnection,\n  createProtocolConnection,\n  Diagnostic,\n  DiagnosticSeverity,\n  DidChangeTextDocumentNotification,\n  DidChangeWatchedFilesNotification,\n  DidOpenTextDocumentNotification,\n  InitializeParams,\n  InitializeRequest,\n  InitializeResult,\n  Logger,\n  PublishDiagnosticsParams,\n  ServerCapabilities,\n  StreamMessageReader,\n  StreamMessageWriter,\n} from 'vscode-languageserver/node'\nimport { URI } from 'vscode-uri'\n\nimport {\n  diagnosticToTerminalLog,\n  normalizeLspDiagnostic,\n  normalizePublishDiagnosticParams,\n  NormalizedDiagnostic,\n} from '../../logger'\nimport { DeepPartial } from '../../types'\nimport { getInitParams, VlsOptions } from './initParams'\n\nimport { FileDiagnosticManager } from '../../FileDiagnosticManager'\n\nenum DOC_VERSION {\n  init = -1,\n}\n\nexport type LogLevel = typeof logLevels[number]\nexport const logLevels = ['ERROR', 'WARN', 'INFO', 'HINT'] as const\n\nlet disposeSuppressConsole: ReturnType<typeof suppressConsole>\nlet initialVueFilesCount = 0\nlet initialVueFilesTick = 0\nconst fileDiagnosticManager = new FileDiagnosticManager()\n\nexport const logLevel2Severity = {\n  ERROR: DiagnosticSeverity.Error,\n  WARN: DiagnosticSeverity.Warning,\n  INFO: DiagnosticSeverity.Information,\n  HINT: DiagnosticSeverity.Hint,\n}\n\nexport interface DiagnosticOptions {\n  watch: boolean\n  verbose: boolean\n  config: DeepPartial<VlsOptions> | null\n  onDispatchDiagnostics?: (normalized: NormalizedDiagnostic[]) => void\n  onDispatchDiagnosticsSummary?: (errorCount: number, warningCount: number) => void\n}\n\nexport async function diagnostics(\n  workspace: string | null,\n  logLevel: LogLevel,\n  options: DiagnosticOptions = { watch: false, verbose: false, config: null }\n) {\n  if (options.verbose) {\n    console.log('====================================')\n    console.log('Getting Vetur diagnostics')\n  }\n  let workspaceUri\n\n  if (workspace) {\n    const absPath = path.resolve(process.cwd(), workspace)\n    console.log(`Loading Vetur in workspace path: ${chalk.green(absPath)}`)\n    workspaceUri = URI.file(absPath)\n  } else {\n    console.log(`Loading Vetur in current directory: ${chalk.green(process.cwd())}`)\n    workspaceUri = URI.file(process.cwd())\n  }\n\n  const result = await getDiagnostics(workspaceUri, logLevel2Severity[logLevel], options)\n\n  if (options.verbose) {\n    console.log('====================================')\n  }\n\n  // dispatch error summary in build mode\n  if (!options.watch && typeof result === 'object' && result !== null) {\n    const { initialErrorCount, initialWarningCount } = result\n    options?.onDispatchDiagnosticsSummary?.(initialErrorCount, initialWarningCount)\n    process.exit(initialErrorCount > 0 ? 1 : 0)\n  }\n}\n\nclass NullLogger implements Logger {\n  public error(_message: string): void {}\n  public warn(_message: string): void {}\n  public info(_message: string): void {}\n  public log(_message: string): void {}\n}\n\nexport class TestStream extends Duplex {\n  public _write(chunk: string, _encoding: string, done: () => void) {\n    this.emit('data', chunk)\n    done()\n  }\n  public _read(_size: number) {}\n}\n\nfunction suppressConsole() {\n  let disposed = false\n  const rawConsoleLog = console.log\n  console.log = () => {}\n\n  return () => {\n    if (disposed) return\n    disposed = true\n    console.log = rawConsoleLog\n  }\n}\n\nexport async function prepareClientConnection(\n  workspaceUri: URI,\n  severity: DiagnosticSeverity,\n  options: DiagnosticOptions\n) {\n  const up = new TestStream()\n  const down = new TestStream()\n  const logger = new NullLogger()\n\n  const clientConnection = createProtocolConnection(\n    new StreamMessageReader(down),\n    new StreamMessageWriter(up),\n    logger\n  )\n\n  const serverConnection = createConnection(\n    new StreamMessageReader(up),\n    new StreamMessageWriter(down)\n  )\n\n  // hijack sendDiagnostics\n  serverConnection.sendDiagnostics = async (publishDiagnostics) => {\n    disposeSuppressConsole?.()\n    if (publishDiagnostics.version === DOC_VERSION.init) {\n      return\n    }\n\n    const absFilePath = URI.parse(publishDiagnostics.uri).fsPath\n    publishDiagnostics.diagnostics = filterDiagnostics(publishDiagnostics.diagnostics, severity)\n    const nextDiagnosticInFile = await normalizePublishDiagnosticParams(publishDiagnostics)\n    fileDiagnosticManager.updateByFileId(absFilePath, nextDiagnosticInFile)\n\n    const normalized = fileDiagnosticManager.getDiagnostics()\n    const errorCount = normalized.filter((d) => d.level === DiagnosticSeverity.Error).length\n    const warningCount = normalized.filter((d) => d.level === DiagnosticSeverity.Warning).length\n    initialVueFilesTick++\n    // only starts to log when all .vue files are loaded\n    // onDispatchDiagnostics will dispatch diagnostics of all watched files\n    if (initialVueFilesTick >= initialVueFilesCount) {\n      options.onDispatchDiagnostics?.(normalized)\n      options.onDispatchDiagnosticsSummary?.(errorCount, warningCount)\n    }\n  }\n\n  const vls = new VLS(serverConnection as any)\n\n  vls.validateTextDocument = async (textDocument: TextDocument, cancellationToken?: any) => {\n    const diagnostics = await vls.doValidate(textDocument, cancellationToken)\n    if (diagnostics) {\n      // @ts-expect-error\n      vls.lspConnection.sendDiagnostics({\n        uri: textDocument.uri,\n        version: textDocument.version,\n        diagnostics,\n      })\n    }\n  }\n\n  serverConnection.onInitialize(async (params: InitializeParams): Promise<InitializeResult> => {\n    await vls.init(params)\n\n    if (options.verbose) {\n      console.log('Vetur initialized')\n      console.log('====================================')\n    }\n\n    return {\n      capabilities: vls.capabilities as ServerCapabilities,\n    }\n  })\n\n  vls.listen()\n  clientConnection.listen()\n\n  const initParams = getInitParams(workspaceUri)\n\n  if (options.config) {\n    // Merge in used-provided VLS settings if present\n    mergeDeep(initParams.initializationOptions.config, options.config)\n  }\n\n  await clientConnection.sendRequest(InitializeRequest.type, initParams)\n\n  return { clientConnection, serverConnection, vls, up, down, logger }\n}\n\nfunction extToGlobs(exts: string[]) {\n  return exts.map((e) => '**/*' + e)\n}\n\nconst watchedDidChangeContent = ['.vue']\nconst watchedDidChangeWatchedFiles = ['.js', '.ts', '.json']\nconst watchedDidChangeContentGlob = extToGlobs(watchedDidChangeContent)\n\nasync function getDiagnostics(\n  workspaceUri: URI,\n  severity: DiagnosticSeverity,\n  options: DiagnosticOptions\n): Promise<{ initialErrorCount: number; initialWarningCount: number } | null> {\n  const { clientConnection } = await prepareClientConnection(workspaceUri, severity, options)\n\n  const files = glob.sync([...watchedDidChangeContentGlob], {\n    cwd: workspaceUri.fsPath,\n    ignore: ['node_modules/**'],\n  })\n\n  if (files.length === 0) {\n    console.log('[VLS checker] No input files')\n    return { initialWarningCount: 0, initialErrorCount: 0 }\n  }\n\n  if (options.verbose) {\n    console.log('')\n    console.log('Getting diagnostics from: ', files, '\\n')\n  }\n\n  const absFilePaths = files.map((f) => path.resolve(workspaceUri.fsPath, f))\n\n  // VLS will stdout verbose log, suppress console before any serverConnection\n  disposeSuppressConsole = suppressConsole()\n  initialVueFilesCount = absFilePaths.length\n  let initialErrorCount = 0\n  let initialWarningCount = 0\n  await Promise.all(\n    absFilePaths.map(async (absFilePath) => {\n      // serve mode - step 1\n      // build mode - step 1\n      // report all existing files from client side to server with type `DidOpenTextDocumentNotification.type`\n      const fileText = await fs.promises.readFile(absFilePath, 'utf-8')\n      clientConnection.sendNotification(DidOpenTextDocumentNotification.type, {\n        textDocument: {\n          languageId: 'vue',\n          uri: URI.file(absFilePath).toString(),\n          version: DOC_VERSION.init,\n          text: fileText,\n        },\n      })\n\n      // build mode - step 2\n      // use $/getDiagnostics to get diagnostics from server side directly\n      if (!options.watch) {\n        try {\n          let diagnostics = (await clientConnection.sendRequest('$/getDiagnostics', {\n            uri: URI.file(absFilePath).toString(),\n            version: DOC_VERSION.init,\n          })) as Diagnostic[]\n\n          diagnostics = filterDiagnostics(diagnostics, severity)\n          let logChunk = ''\n          if (diagnostics.length > 0) {\n            logChunk +=\n              os.EOL +\n              diagnostics\n                .map((d) =>\n                  diagnosticToTerminalLog(\n                    normalizeLspDiagnostic({\n                      diagnostic: d,\n                      absFilePath,\n                      fileText,\n                    }),\n                    'VLS'\n                  )\n                )\n                .join(os.EOL)\n\n            diagnostics.forEach((d) => {\n              if (d.severity === DiagnosticSeverity.Error) {\n                initialErrorCount++\n              }\n              if (d.severity === DiagnosticSeverity.Warning) {\n                initialWarningCount++\n              }\n            })\n          }\n\n          console.log(logChunk)\n          return { initialErrorCount, initialWarningCount }\n        } catch (err: any) {\n          console.error(err.stack)\n          return { initialErrorCount, initialWarningCount }\n        }\n      }\n    })\n  )\n\n  if (!options.watch) {\n    return { initialErrorCount, initialWarningCount }\n  }\n\n  // serve mode - step 2\n  // watch files (.vue,.js,.ts,.json) change and send notification to server\n  await Promise.all(\n    absFilePaths.map(async (absFilePath) => {\n      const fileText = await fs.promises.readFile(absFilePath, 'utf-8')\n      clientConnection.sendNotification(DidOpenTextDocumentNotification.type, {\n        textDocument: {\n          languageId: 'vue',\n          uri: URI.file(absFilePath).toString(),\n          version: DOC_VERSION.init,\n          text: fileText,\n        },\n      })\n    })\n  )\n\n  const watcher = chokidar.watch([], {\n    ignored: (path: string) => path.includes('node_modules'),\n  })\n\n  watcher.add(workspaceUri.fsPath)\n  watcher.on('all', async (event, filePath) => {\n    const extname = path.extname(filePath)\n    // .vue file changed\n    if (!filePath.endsWith('.vue')) return\n    const fileContent = await fs.promises.readFile(filePath, 'utf-8')\n    clientConnection.sendNotification(DidChangeTextDocumentNotification.type, {\n      textDocument: {\n        uri: URI.file(filePath).toString(),\n        version: Date.now(),\n      },\n      contentChanges: [{ text: fileContent }],\n    })\n\n    // .js,.ts,.json file changed\n    if (watchedDidChangeWatchedFiles.includes(extname)) {\n      clientConnection.sendNotification(DidChangeWatchedFilesNotification.type, {\n        changes: [\n          {\n            uri: URI.file(filePath).toString(),\n            type: event === 'add' ? 1 : event === 'unlink' ? 3 : 2,\n          },\n        ],\n      })\n    }\n  })\n\n  return null\n}\n\nfunction isObject(item: any): item is {} {\n  return item && typeof item === 'object' && !Array.isArray(item)\n}\n\nfunction mergeDeep<T>(target: T, source: DeepPartial<T> | undefined) {\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, { [key]: {} })\n        mergeDeep(target[key], source[key])\n      } else {\n        Object.assign(target, { [key]: source[key] })\n      }\n    }\n  }\n\n  return target\n}\n\nfunction filterDiagnostics(diagnostics: Diagnostic[], severity: number): Diagnostic[] {\n  /**\n   * Ignore eslint errors for now\n   */\n  return diagnostics\n    .filter((r) => r.source !== 'eslint-plugin-vue')\n    .filter((r) => r.severity && r.severity <= severity)\n}\n"],"mappings":"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","names":[]}