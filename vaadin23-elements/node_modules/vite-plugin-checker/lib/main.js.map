{"version":3,"sources":["../src/main.ts"],"sourcesContent":["import chalk from 'chalk'\nimport { spawn } from 'child_process'\nimport pick from 'lodash.pick'\nimport npmRunPath from 'npm-run-path'\nimport path from 'path'\nimport { ConfigEnv, Plugin, ResolvedConfig } from 'vite'\n\nimport { Checker } from './Checker'\nimport { RUNTIME_PUBLIC_PATH, runtimeCode, WS_CHECKER_RECONNECT_EVENT } from './client/index'\nimport {\n  ACTION_TYPES,\n  BuildCheckBinStr,\n  BuildInCheckerNames,\n  OverlayErrorAction,\n  PluginConfig,\n  ServeAndBuildChecker,\n  SharedConfig,\n  UserPluginConfig,\n} from './types'\n\nconst sharedConfigKeys: (keyof SharedConfig)[] = ['enableBuild', 'overlay']\nconst buildInCheckerKeys: BuildInCheckerNames[] = ['typescript', 'vueTsc', 'vls', 'eslint']\n\nfunction createCheckers(userConfig: UserPluginConfig, env: ConfigEnv): ServeAndBuildChecker[] {\n  const serveAndBuildCheckers: ServeAndBuildChecker[] = []\n  const sharedConfig = pick(userConfig, sharedConfigKeys)\n\n  buildInCheckerKeys.forEach((name: BuildInCheckerNames) => {\n    if (!userConfig[name]) return\n\n    const { createServeAndBuild } = require(`./checkers/${name}/main`)\n    serveAndBuildCheckers.push(\n      createServeAndBuild({ [name]: userConfig[name], ...sharedConfig }, env)\n    )\n  })\n\n  return serveAndBuildCheckers\n}\n\nexport default function Plugin(userConfig: UserPluginConfig): Plugin {\n  const enableBuild = userConfig?.enableBuild ?? true\n  const enableOverlay = userConfig?.overlay !== false\n  const enableTerminal = userConfig?.terminal !== false\n  const overlayConfig = typeof userConfig?.overlay === 'object' ? userConfig?.overlay : {}\n  let resolvedRuntimePath = RUNTIME_PUBLIC_PATH\n  let checkers: ServeAndBuildChecker[] = []\n\n  let viteMode: ConfigEnv['command'] | undefined\n  let resolvedConfig: ResolvedConfig | undefined\n\n  return {\n    name: 'vite-plugin-checker',\n    config: (config, env) => {\n      // for dev mode (1/2)\n      // Initialize checker with config\n      viteMode = env.command\n\n      checkers = createCheckers(userConfig || {}, env)\n      if (viteMode !== 'serve') return\n\n      checkers.forEach((checker) => {\n        const workerConfig = checker.serve.config\n        workerConfig({\n          enableOverlay,\n          enableTerminal,\n          env,\n        })\n      })\n    },\n    configResolved(config) {\n      resolvedConfig = config\n      resolvedRuntimePath = config.base + RUNTIME_PUBLIC_PATH.slice(1)\n    },\n    buildEnd() {\n      if (viteMode === 'serve') {\n        checkers.forEach((checker) => {\n          const { worker } = checker.serve\n          worker.terminate()\n        })\n      }\n    },\n    resolveId(id) {\n      if (viteMode === 'serve') {\n        if (id === RUNTIME_PUBLIC_PATH) {\n          return id\n        }\n      }\n    },\n    load(id) {\n      if (viteMode === 'serve') {\n        if (id === RUNTIME_PUBLIC_PATH) {\n          return runtimeCode\n        }\n      }\n    },\n    transform(code, id) {\n      if (id === RUNTIME_PUBLIC_PATH) {\n        if (!resolvedConfig) return\n\n        // #region\n        // copied from https://github.dev/vitejs/vite/blob/76bbcd09985f85f7786b7e2e2d5ce177ee7d1916/packages/vite/src/client/client.ts#L25\n        let options = resolvedConfig.server.hmr\n        options = options && typeof options !== 'boolean' ? options : {}\n        const host = options.host || null\n        const protocol = options.protocol || null\n        let port: number | string | false | undefined\n        if (isObject(resolvedConfig.server.hmr)) {\n          port = resolvedConfig.server.hmr.clientPort || resolvedConfig.server.hmr.port\n        }\n        if (resolvedConfig.server.middlewareMode) {\n          port = String(port || 24678)\n        } else {\n          port = String(port || options.port || resolvedConfig.server.port!)\n        }\n\n        let hmrBase = resolvedConfig.base\n        if (options.path) {\n          hmrBase = path.posix.join(hmrBase, options.path)\n        }\n        if (hmrBase !== '/') {\n          port = path.posix.normalize(`${port}${hmrBase}`)\n        }\n\n        return code\n          .replace(/__HMR_PROTOCOL__/g, JSON.stringify(protocol))\n          .replace(/__HMR_HOSTNAME__/g, JSON.stringify(host))\n          .replace(/__HMR_PORT__/g, JSON.stringify(port))\n        // #endregion\n      }\n\n      return null\n    },\n    transformIndexHtml() {\n      if (viteMode === 'serve') {\n        return [\n          {\n            tag: 'script',\n            attrs: { type: 'module' },\n            children: `import { inject } from \"${resolvedRuntimePath}\";\ninject({\n  overlayConfig: ${JSON.stringify(overlayConfig)},\n  base: \"${resolvedConfig?.base}\",\n});`,\n          },\n        ]\n      }\n    },\n    buildStart: () => {\n      // only run in build mode\n      // run a bin command in a separated process\n      if (viteMode !== 'build' || !enableBuild) return\n\n      const localEnv = npmRunPath.env({\n        env: process.env,\n        cwd: process.cwd(),\n        execPath: process.execPath,\n      })\n\n      // spawn an async runner that we don't wait for in order to avoid blocking the build from continuing in parallel\n      ;(async () => {\n        const exitCodes = await Promise.all(\n          checkers.map((checker) => spawnChecker(checker, userConfig, localEnv))\n        )\n        const exitCode = exitCodes.find((code) => code !== 0) ?? 0\n        // do not exit the process if run `vite build --watch`\n        if (exitCode !== 0 && !resolvedConfig?.build.watch) {\n          process.exit(exitCode)\n        }\n      })()\n    },\n    configureServer(server) {\n      let connectedTimes = 0\n      let latestOverlayErrors: OverlayErrorAction['payload'][] = new Array(checkers.length)\n      // for dev mode (2/2)\n      // Get the server instance and keep reference in a closure\n      checkers.forEach((checker, index) => {\n        const { worker, configureServer: workerConfigureServer } = checker.serve\n        workerConfigureServer({ root: server.config.root })\n        worker.on('message', (action: OverlayErrorAction) => {\n          if (action.type === ACTION_TYPES.overlayError) {\n            latestOverlayErrors[index] = action.payload\n            if (action.payload) {\n              server.ws.send(action.payload)\n            }\n          } else if (action.type === ACTION_TYPES.console) {\n            Checker.log(action)\n          }\n        })\n      })\n\n      return () => {\n        if (server.ws.on) {\n          // sometimes Vite will trigger a full-reload instead of HMR, but the checker\n          // may update the overlay before full-reload fired. So we make sure the overlay\n          // will be displayed again after full-reload.\n          server.ws.on('connection', () => {\n            connectedTimes++\n            // if connectedCount !== 1, means Vite is doing a full-reload, so we don't need to send overlay again\n            if (connectedTimes > 1) {\n              server.ws.send({\n                type: 'custom',\n                event: WS_CHECKER_RECONNECT_EVENT,\n                data: latestOverlayErrors.filter(Boolean),\n              })\n            }\n          })\n        } else {\n          setTimeout(() => {\n            console.warn(\n              chalk.yellow(\n                \"[vite-plugin-checker]: `server.ws.on` is introduced to Vite in 2.6.8, see [PR](https://github.com/vitejs/vite/pull/5273) and [changelog](https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#268-2021-10-18). \\nvite-plugin-checker relies on `server.ws.on` to bring diagnostics back after a full reload and it' not available for you now due to the old version of Vite. You can upgrade Vite to latest version to eliminate this warning.\"\n              )\n            )\n            // make a delay to avoid flush by Vite's console\n          }, 5000)\n        }\n\n        server.middlewares.use((req, res, next) => {\n          next()\n        })\n      }\n    },\n  }\n}\n\nfunction spawnChecker(\n  checker: ServeAndBuildChecker,\n  userConfig: Partial<PluginConfig>,\n  localEnv: npmRunPath.ProcessEnv\n) {\n  return new Promise<number>((resolve) => {\n    const buildBin = checker.build.buildBin\n    const finalBin: BuildCheckBinStr =\n      typeof buildBin === 'function' ? buildBin(userConfig) : buildBin\n\n    const proc = spawn(...finalBin, {\n      cwd: process.cwd(),\n      stdio: 'inherit',\n      env: localEnv,\n      // shell is necessary on windows to get the process to even start.\n      // Command line args constructed by checkers therefore need to escape double quotes\n      // to have them not striped out by cmd.exe. Using shell on all platforms lets us avoid\n      // having to perform platform-specific logic around escaping quotes since all platform\n      // shells will strip out unescaped double quotes. E.g. shell=false on linux only would\n      // result in escaped quotes not being unescaped.\n      shell: true,\n    })\n\n    proc.on('exit', (code) => {\n      if (code !== null && code !== 0) {\n        resolve(code)\n      } else {\n        resolve(0)\n      }\n    })\n  })\n}\n\nexport function isObject(value: unknown): value is Record<string, any> {\n  return Object.prototype.toString.call(value) === '[object Object]'\n}\n"],"mappings":"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","names":[]}