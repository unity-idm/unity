{"version":3,"sources":["../src/logger.ts"],"sourcesContent":["import chalk from 'chalk'\nimport fs from 'fs'\nimport os from 'os'\nimport strip from 'strip-ansi'\nimport { CustomPayload } from 'vite'\nimport { URI } from 'vscode-uri'\nimport { isMainThread, parentPort } from 'worker_threads'\n\nimport { codeFrameColumns, SourceLocation } from '@babel/code-frame'\n\nimport { WS_CHECKER_ERROR_EVENT } from './client/index'\nimport { ACTION_TYPES, DiagnosticToRuntime, DiagnosticLevel } from './types'\n\nimport type { Range } from 'vscode-languageclient'\nimport type { ESLint } from 'eslint'\nimport type {\n  Diagnostic as LspDiagnostic,\n  PublishDiagnosticsParams,\n} from 'vscode-languageclient/node'\n\nimport type {\n  Diagnostic as TsDiagnostic,\n  flattenDiagnosticMessageText as flattenDiagnosticMessageTextType,\n  LineAndCharacter,\n} from 'typescript'\n\nexport interface NormalizedDiagnostic {\n  /** error message */\n  message?: string\n  /** error conclusion */\n  conclusion?: string\n  /** error stack */\n  stack?: string | string[]\n  /** file name */\n  id?: string\n  /** checker diagnostic source */\n  checker: string\n  /** raw code frame generated by @babel/code-frame */\n  codeFrame?: string\n  /** code frame, but striped */\n  stripedCodeFrame?: string\n  /** error code location */\n  loc?: SourceLocation\n  /** error level */\n  level?: DiagnosticLevel\n}\n\nconst defaultLogLevel = [\n  DiagnosticLevel.Warning,\n  DiagnosticLevel.Error,\n  DiagnosticLevel.Suggestion,\n  DiagnosticLevel.Message,\n]\n\nexport function filterLogLevel(\n  diagnostics: NormalizedDiagnostic,\n  level?: DiagnosticLevel[]\n): NormalizedDiagnostic | null\nexport function filterLogLevel(\n  diagnostics: NormalizedDiagnostic[],\n  level?: DiagnosticLevel[]\n): NormalizedDiagnostic[]\nexport function filterLogLevel(\n  diagnostics: NormalizedDiagnostic | NormalizedDiagnostic[],\n  level: DiagnosticLevel[] = defaultLogLevel\n): NormalizedDiagnostic | null | NormalizedDiagnostic[] {\n  if (Array.isArray(diagnostics)) {\n    return diagnostics.filter((d) => {\n      if (typeof d.level !== 'number') return false\n      return level.includes(d.level)\n    })\n  } else {\n    if (!diagnostics.level) return null\n    return level.includes(diagnostics.level) ? diagnostics : null\n  }\n}\n\nexport function diagnosticToTerminalLog(\n  d: NormalizedDiagnostic,\n  name?: 'TypeScript' | 'vue-tsc' | 'VLS' | 'ESLint'\n): string {\n  const nameInLabel = name ? `(${name})` : ''\n  const boldBlack = chalk.bold.rgb(0, 0, 0)\n\n  const labelMap: Record<DiagnosticLevel, string> = {\n    [DiagnosticLevel.Error]: boldBlack.bgRedBright(` ERROR${nameInLabel} `),\n    [DiagnosticLevel.Warning]: boldBlack.bgYellowBright(` WARNING${nameInLabel} `),\n    [DiagnosticLevel.Suggestion]: boldBlack.bgBlueBright(` SUGGESTION${nameInLabel} `),\n    [DiagnosticLevel.Message]: boldBlack.bgCyanBright(` MESSAGE${nameInLabel} `),\n  }\n\n  const levelLabel = labelMap[d.level ?? DiagnosticLevel.Error]\n  const fileLabel = boldBlack.bgCyanBright(' FILE ') + ' '\n  const position = d.loc\n    ? chalk.yellow(d.loc.start.line) + ':' + chalk.yellow(d.loc.start.column)\n    : ''\n\n  return [\n    levelLabel + ' ' + d.message,\n    fileLabel + d.id + ':' + position + os.EOL,\n    d.codeFrame + os.EOL,\n    d.conclusion,\n  ]\n    .filter(Boolean)\n    .join(os.EOL)\n}\n\nexport function diagnosticToRuntimeError(d: NormalizedDiagnostic): DiagnosticToRuntime\nexport function diagnosticToRuntimeError(d: NormalizedDiagnostic[]): DiagnosticToRuntime[]\nexport function diagnosticToRuntimeError(\n  diagnostics: NormalizedDiagnostic | NormalizedDiagnostic[]\n): DiagnosticToRuntime | DiagnosticToRuntime[] {\n  const diagnosticsArray = Array.isArray(diagnostics) ? diagnostics : [diagnostics]\n\n  const results: DiagnosticToRuntime[] = diagnosticsArray.map((d) => {\n    let loc: DiagnosticToRuntime['loc']\n    if (d.loc) {\n      loc = {\n        file: d.id,\n        line: d.loc.start.line,\n        column: typeof d.loc.start.column === 'number' ? d.loc.start.column : 0,\n      }\n    }\n\n    return {\n      message: d.message ?? '',\n      stack:\n        typeof d.stack === 'string' ? d.stack : Array.isArray(d.stack) ? d.stack.join(os.EOL) : '',\n      id: d.id,\n      frame: d.stripedCodeFrame,\n      checkerId: d.checker,\n      level: d.level,\n      loc,\n    }\n  })\n\n  return Array.isArray(diagnostics) ? results : results[0]\n}\n\nexport function toViteCustomPayload(id: string, diagnostics: DiagnosticToRuntime[]): CustomPayload {\n  return {\n    type: 'custom',\n    event: WS_CHECKER_ERROR_EVENT,\n    data: {\n      checkerId: id,\n      diagnostics,\n    },\n  }\n}\n\nexport function createFrame({\n  source,\n  location,\n}: {\n  /** file source code */\n  source: string\n  location: SourceLocation\n}) {\n  const frame = codeFrameColumns(source, location, {\n    // worker tty did not fork parent process stdout, let's make a workaround\n    forceColor: true,\n  })\n    .split('\\n')\n    .map((line) => '  ' + line)\n    .join(os.EOL)\n\n  return frame\n}\n\nexport function tsLocationToBabelLocation(\n  tsLoc: Record<'start' | 'end', LineAndCharacter /** 0-based */>\n): SourceLocation {\n  return {\n    start: { line: tsLoc.start.line + 1, column: tsLoc.start.character + 1 },\n    end: { line: tsLoc.end.line + 1, column: tsLoc.end.character + 1 },\n  }\n}\n\nexport function wrapCheckerSummary(checkerName: string, rawSummary: string): string {\n  return `[${checkerName}] ${rawSummary}`\n}\n\nexport function composeCheckerSummary(\n  checkerName: string,\n  errorCount: number,\n  warningCount: number\n): string {\n  const message = `Found ${errorCount} error${\n    errorCount > 1 ? 's' : ''\n  } and ${warningCount} warning${warningCount > 1 ? 's' : ''}`\n\n  const hasError = errorCount > 0\n  const hasWarning = warningCount > 0\n  const color = hasError ? 'red' : hasWarning ? 'yellow' : 'green'\n  return chalk[color](wrapCheckerSummary(checkerName, message))\n}\n\n/* ------------------------------- TypeScript ------------------------------- */\n\nexport function normalizeTsDiagnostic(d: TsDiagnostic): NormalizedDiagnostic {\n  const fileName = d.file?.fileName\n  const {\n    flattenDiagnosticMessageText,\n  }: {\n    flattenDiagnosticMessageText: typeof flattenDiagnosticMessageTextType\n  } = require('typescript')\n\n  const message = flattenDiagnosticMessageText(d.messageText, os.EOL)\n\n  let loc: SourceLocation | undefined\n  const pos = d.start === undefined ? null : d.file?.getLineAndCharacterOfPosition?.(d.start)\n  if (pos && d.file && typeof d.start === 'number' && typeof d.length === 'number') {\n    loc = tsLocationToBabelLocation({\n      start: d.file?.getLineAndCharacterOfPosition(d.start),\n      end: d.file?.getLineAndCharacterOfPosition(d.start + d.length),\n    })\n  }\n\n  let codeFrame: string | undefined\n  if (loc) {\n    codeFrame = createFrame({\n      source: d.file!.text,\n      location: loc,\n    })\n  }\n\n  return {\n    message,\n    conclusion: '',\n    codeFrame,\n    stripedCodeFrame: codeFrame && strip(codeFrame),\n    id: fileName,\n    checker: 'TypeScript',\n    loc,\n    level: d.category as any as DiagnosticLevel,\n  }\n}\n\n/* ----------------------------------- LSP ---------------------------------- */\n\nexport function normalizeLspDiagnostic({\n  diagnostic,\n  absFilePath,\n  fileText,\n}: {\n  diagnostic: LspDiagnostic\n  absFilePath: string\n  fileText: string\n}): NormalizedDiagnostic {\n  let level = DiagnosticLevel.Error\n  const loc = lspRange2Location(diagnostic.range)\n  const codeFrame = codeFrameColumns(fileText, loc)\n\n  switch (diagnostic.severity) {\n    case 1: // Error\n      level = DiagnosticLevel.Error\n      break\n    case 2: // Warning\n      level = DiagnosticLevel.Warning\n      break\n    case 3: // Information\n      level = DiagnosticLevel.Message\n      break\n    case 4: // Hint\n      level = DiagnosticLevel.Suggestion\n      break\n  }\n\n  return {\n    message: diagnostic.message.trim(),\n    conclusion: '',\n    codeFrame,\n    stripedCodeFrame: codeFrame && strip(codeFrame),\n    id: absFilePath,\n    checker: 'VLS',\n    loc,\n    level,\n  }\n}\n\nexport async function normalizePublishDiagnosticParams(\n  publishDiagnostics: PublishDiagnosticsParams\n): Promise<NormalizedDiagnostic[]> {\n  const diagnostics = publishDiagnostics.diagnostics\n  const absFilePath = uriToAbsPath(publishDiagnostics.uri)\n  const { readFile } = fs.promises\n  const fileText = await readFile(absFilePath, 'utf-8')\n\n  const res = diagnostics.map((d) => {\n    return normalizeLspDiagnostic({\n      diagnostic: d,\n      absFilePath,\n      fileText,\n    })\n  })\n\n  return res\n}\n\nexport function uriToAbsPath(documentUri: string): string {\n  return URI.parse(documentUri).fsPath\n}\n\nexport function lspRange2Location(range: Range): SourceLocation {\n  return {\n    start: {\n      line: range.start.line + 1,\n      column: range.start.character + 1,\n    },\n    end: {\n      line: range.end.line + 1,\n      column: range.end.character + 1,\n    },\n  }\n}\n\n/* --------------------------------- vue-tsc -------------------------------- */\n\nexport function normalizeVueTscDiagnostic(d: TsDiagnostic): NormalizedDiagnostic {\n  const diagnostic = normalizeTsDiagnostic(d)\n  diagnostic.checker = 'vue-tsc'\n  return diagnostic\n}\n\n/* --------------------------------- ESLint --------------------------------- */\n\nconst isNormalizedDiagnostic = (\n  d: NormalizedDiagnostic | null | undefined\n): d is NormalizedDiagnostic => {\n  return Boolean(d)\n}\n\nexport function normalizeEslintDiagnostic(diagnostic: ESLint.LintResult): NormalizedDiagnostic[] {\n  return diagnostic.messages\n    .map((d) => {\n      let level = DiagnosticLevel.Error\n      switch (d.severity) {\n        case 0: // off, ignore this\n          level = DiagnosticLevel.Error\n          return null\n        case 1: // warn\n          level = DiagnosticLevel.Warning\n          break\n        case 2: // error\n          level = DiagnosticLevel.Error\n          break\n      }\n\n      const loc: SourceLocation = {\n        start: {\n          line: d.line,\n          column: d.column,\n        },\n        end: {\n          line: d.endLine || 0,\n          column: d.endColumn,\n        },\n      }\n\n      const codeFrame = createFrame({\n        source: diagnostic.source ?? '',\n        location: loc,\n      })\n\n      return {\n        message: `${d.message} (${d.ruleId})`,\n        conclusion: '',\n        codeFrame,\n        stripedCodeFrame: codeFrame && strip(codeFrame),\n        id: diagnostic.filePath,\n        checker: 'ESLint',\n        loc,\n        level,\n      } as any as NormalizedDiagnostic\n    })\n    .filter(isNormalizedDiagnostic)\n}\n\n/* ------------------------------ miscellaneous ----------------------------- */\nexport function ensureCall(callback: CallableFunction) {\n  setTimeout(() => {\n    callback()\n  })\n}\n\nexport function consoleLog(value: string) {\n  if (isMainThread) {\n    console.log(value)\n  } else {\n    parentPort?.postMessage({\n      type: ACTION_TYPES.console,\n      payload: value,\n    })\n  }\n}\n"],"mappings":"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","names":[]}