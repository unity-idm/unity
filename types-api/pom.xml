<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<parent>
		<groupId>io.imunity</groupId>
		<artifactId>unity-server-parent</artifactId>
		<version>3.6.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<modelVersion>4.0.0</modelVersion>
	<artifactId>unity-types-api</artifactId>
	<packaging>jar</packaging>
	<name>UNITY Server ${m.name} module</name>
	<description>Module with classes useful for both server and client side, 
	exposing fundamental classes describing Unity abstractions. Minimal external dependencies, 
	especially useful for REST clients as JSON serialization is provided.</description>

	<properties>
		<m.name>types-api</m.name>
	</properties>

	<scm>
		<connection>${scm.base}/${m.name}</connection>
		<developerConnection>${scm.base}/${m.name}</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<dependencies>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mvel</groupId>
			<artifactId>mvel2</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
		</dependency>
		<!-- We use some spring annotations. However only for spring aware containers, 
			the classes can be used without spring as well. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>
